{"version":3,"sources":["components/inputPart/Input.module.css","App.module.css","components/outputPart/Output.module.css","components/inputPart/Input.jsx","components/outputPart/Output.jsx","calculatorFunctional/operations/commonOperationClass.ts","calculatorFunctional/operations/parentheses/parenthesisClass.ts","calculatorFunctional/operations/parentheses/operations/closeParenthesis.ts","calculatorFunctional/operations/parentheses/parentheses.ts","calculatorFunctional/operations/parentheses/operations/openParenthesis.ts","utils/arrayHelper.ts","utils/isNumber.ts","calculatorFunctional/operations/calculateOperations/calcOperationClass.ts","calculatorFunctional/operations/calculateOperations/calcOperations.ts","calculatorFunctional/operations/calculateOperations/operations/addition.ts","calculatorFunctional/operations/calculateOperations/operations/division.ts","calculatorFunctional/operations/calculateOperations/operations/multiplication.ts","calculatorFunctional/operations/calculateOperations/operations/percent.ts","calculatorFunctional/operations/calculateOperations/operations/squareRoot.ts","calculatorFunctional/operations/calculateOperations/operations/subtraction.ts","calculatorFunctional/operations/calculateOperations/findOperationBySymbol.ts","calculatorFunctional/operations/numbersInputs/numbers/default/eight.ts","calculatorFunctional/operations/numbersInputs/numbers/default/five.ts","calculatorFunctional/operations/numbersInputs/numbers/default/four.ts","calculatorFunctional/operations/numbersInputs/numbers/default/nine.ts","calculatorFunctional/operations/numbersInputs/numbers/default/one.ts","calculatorFunctional/operations/numbersInputs/numbers/default/seven.ts","calculatorFunctional/operations/numbersInputs/numbers/default/six.ts","calculatorFunctional/operations/numbersInputs/numbers/default/three.ts","calculatorFunctional/operations/numbersInputs/numbers/default/two.ts","calculatorFunctional/operations/numbersInputs/numbersInputs.ts","calculatorFunctional/operations/numbersInputs/numbers/default/zero.ts","calculatorFunctional/operations/numbersInputs/numbers/doubleZero.ts","calculatorFunctional/operations/numbersInputs/otherInputs/comma.ts","calculatorFunctional/operations/numbersInputs/findNumberInputBySymbol.ts","calculatorFunctional/operations/parentheses/findParenthesis.ts","calculatorFunctional/calculateResult/parseSymbols.ts","calculatorFunctional/calculateResult/calculateResult.ts","calculatorFunctional/operations/defaultOperations/operations/calculate.ts","calculatorFunctional/operations/defaultOperations/operations/clean.ts","redux/calc/calcReducer.js","calculatorFunctional/operations/defaultOperations/defaultOperations.ts","redux/calc/calcSelectors.js","redux/store.js","App.js","index.js"],"names":["module","exports","Button","symbol","func","isInvert","data-symbol","className","cn","styles","button","invert","onClick","e","currentTarget","dataset","createBtn","data","Input","topLineBlockOpers","rightColumnBlockOpers","numbersInputsBlockOpers","input","topLine","map","rightLine","numbersInputs","Output","expression","inputVal","error","onInputChange","output","value","onChange","CommonOperationClass","exSymbols","this","includes","ParenthesisClass","type","closeParenthesis","parentheses","openParenthesis","arrayHelper","changeItemsOnItem","array","newItemValue","leftBorderIndex","rightBorderIndex","slice","isNumber","isFinite","CalcOperationClass","operationName","priority","canBePlacedAfterOtherOperation","canBePlacedBeforeOtherOperation","hasOwnFullCalculateFunc","exprStructure","index","argumentsNotFound","rightNumIndex","isExistRightNum","length","rightNum","leftNumIndex","isExistLeftNum","leftNum","prevExprElemIndex","isExistPrevExprElem","prevExprElem","nextExprElemIndex","isExistNextExprElem","nextExprElem","getPrevExprElem","getNextExprElem","Error","params","calcOperations","addition","leftArg","rightArg","stepByStepOperations","division","getRightNum","divideByZero","multiplication","percent","numOnRightMustNotBe","expr","calculateExpr","operationIndex","exprLastIndexToCalc","newExprStructure","calculate","mainNumIndex","mainNum","secondaryNumIndex","secondaryNum","result","squareRoot","leftNumber","rightNumber","Math","pow","getLeftNum","numOnRightMustBe","exprOnLeftMustNotBeNum","subtraction","findOperationBySymbol","Object","values","find","operation","checkIsOperation","eight","five","four","nine","one","seven","six","three","two","zero","doubleZero","comma","findNumberInputBySymbol","numberInput","findParenthesis","parenthesis","checkParenthesisPairFinder","count","checkType","errorMessage","hasStringExprStructure","exprChild","Array","parse","symbols","parenthesisPairFinder","getType","parseResult","isArray","closeParenthesisIndex","newParenthesisPairFinder","thisParenthesesExprStructure","correctSymbol","getMathCorrectSymbol","lastIndex","isExistLastElement","lastElement","nextSymbolIndex","isNextSymbolNumber","Number","parseFloat","toString","newLastElement","exprStructureWithOutLastElem","checkByOperationsCheckers","element","parseCheck","parseSymbols","split","calculateExprDefValues","maxPriority","maxPriorityOperationIndex","entries","reduce","acc","key","defValue","setDefaultValues","currentPriority","makeCalculations","exprStructureWithOutParentheses","calculateResult","number","clean","SET_INPUT","ADD_SYMBOL","CLEAN","CALCULATE","DELETE_LAST_SYMBOL","initialState","defaultOperations","parenthesesOperations","calcReducer","state","action","payload","message","getInput","calc","getExpression","getError","format","funcName","formatOperations","operations","customOperations","name","getSymbol","getExSymbols","getNumbersInputs","createSelector","numberInputs","getParenthesesOperations","getDefaultOperations","getCalcOperations","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","setFunctions","inputFuncs","newOperation","respondOnKeyUp","forEach","AppComponentContainer","connect","dispatch","setInput","addSymbol","deleteLastSymbol","props","getOperationsByBlocks","noBlockOpers","appWrapperRef","React","createRef","onEvent","event","target","stopPropagation","useEffect","appWrapperElement","current","focus","addEventListener","removeEventListener","ref","app__wrapper","tabIndex","app","app__background","app__container","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e46c680d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__TRnYi\",\"topLine\":\"Input_topLine__3GNZu\",\"rightLine\":\"Input_rightLine__20Wr-\",\"numbersInputs\":\"Input_numbersInputs__fFy6X\",\"button\":\"Input_button__1-Hk5\",\"invert\":\"Input_invert__ydKL6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app__wrapper\":\"App_app__wrapper__2hZuJ\",\"app\":\"App_app__2jjf2\",\"app__background\":\"App_app__background__2hu6X\",\"app__container\":\"App_app__container__2nXwl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"output\":\"Output_output__1fJgL\",\"error\":\"Output_error__1O_Kj\",\"input\":\"Output_input__3VUJf\"};","import cn from 'classnames';\r\nimport styles from './Input.module.css';\r\n\r\nconst Button = ({ symbol, func, isInvert }) => (\r\n    <div data-symbol={symbol}\r\n        className={cn(styles.button, { [styles.invert]: isInvert })}\r\n        onClick={(e) => func(e.currentTarget.dataset.symbol)}>\r\n        {symbol}\r\n    </div>\r\n);\r\n\r\nconst createBtn = (data) => (<Button key={data.symbol} {...data} />);\r\n\r\nconst Input = ({ topLineBlockOpers, rightColumnBlockOpers, numbersInputsBlockOpers }) => (\r\n    <div className={styles.input}>\r\n        <div className={styles.topLine}>\r\n            {topLineBlockOpers.map(createBtn)}\r\n        </div>\r\n        <div className={styles.rightLine}>\r\n            {rightColumnBlockOpers.map(createBtn)}\r\n        </div>\r\n        <div className={styles.numbersInputs}>\r\n            {numbersInputsBlockOpers.map(createBtn)}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Input;","import styles from './Output.module.css';\r\n\r\nconst Output = ({ expression, inputVal, error, onInputChange }) => {\r\n    return (\r\n        <div className={styles.output}>\r\n            <div className={styles.expression}>{expression}</div>\r\n            <input className={styles.input} value={inputVal} onChange={onInputChange} />\r\n            <span className={styles.error}>{error}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Output;","export interface CommonOperationInterface {\r\n    readonly symbol: string,\r\n    readonly exSymbols?: Array<string>,\r\n    getSymbol(): string,\r\n    getExSymbols(): Array<string>,\r\n    getMathCorrectSymbol(): string,\r\n    checkIsOperation(symbol: string): boolean,\r\n}\r\n\r\nexport default class CommonOperationClass implements CommonOperationInterface {\r\n    constructor(\r\n        readonly symbol: string,\r\n        readonly exSymbols: Array<string> = [],\r\n    ) {\r\n        this.symbol = symbol;\r\n        this.exSymbols = exSymbols;\r\n    }\r\n\r\n    getSymbol(): string {\r\n        return this.symbol;\r\n    };\r\n\r\n    getExSymbols(): Array<string> {\r\n        return this.exSymbols;\r\n    };\r\n\r\n    getMathCorrectSymbol(): string {\r\n        return this.symbol;\r\n    };\r\n\r\n    checkIsOperation(symbol: string): boolean {\r\n        return this.symbol === symbol || this.exSymbols.includes(symbol);\r\n    };\r\n}","import CommonOperationClass, { CommonOperationInterface } from \"../commonOperationClass\";\r\n\r\nexport interface ParenthesisInterface extends CommonOperationInterface {\r\n    readonly symbol: string,\r\n    readonly type: string,\r\n    getType(): string,\r\n}\r\n\r\nclass ParenthesisClass extends CommonOperationClass implements ParenthesisInterface {\r\n    constructor(\r\n        readonly symbol: string,\r\n        readonly type: string\r\n    ) {\r\n        super(symbol);\r\n        this.type = type;\r\n    }\r\n\r\n    getType(): string {\r\n        return this.type;\r\n    }\r\n}\r\n\r\nexport default ParenthesisClass;","import ParenthesisClass from '../parenthesisClass';\r\n\r\nconst closeParenthesis = new ParenthesisClass(')', 'close');\r\n\r\nexport default closeParenthesis;","import closeParenthesis from \"./operations/closeParenthesis\";\r\nimport openParenthesis from \"./operations/openParenthesis\";\r\nimport { ParenthesisInterface } from \"./parenthesisClass\";\r\n\r\ninterface ParenthesesInterface {\r\n    [key: string]: ParenthesisInterface,\r\n}\r\n\r\nconst parentheses: ParenthesesInterface = { openParenthesis, closeParenthesis };\r\n\r\nexport default parentheses;","import ParenthesisClass from \"../parenthesisClass\";\r\n\r\nconst openParenthesis = new ParenthesisClass('(', 'open');\r\n\r\nexport default openParenthesis;","const arrayHelper = {\r\n    changeItemsOnItem <T> (\r\n        array: T[],\r\n        newItemValue: any,\r\n        leftBorderIndex: number,\r\n        rightBorderIndex: number = leftBorderIndex + 2,\r\n    ): T[] {\r\n        return [\r\n            ...array.slice(0, leftBorderIndex + 1),\r\n            newItemValue,\r\n            ...array.slice(rightBorderIndex),\r\n        ]\r\n    },\r\n};\r\n\r\nexport default arrayHelper;","const isNumber = (value: any): value is number => (typeof value === 'number' && isFinite(value));\r\n\r\nexport default isNumber;","import isNumber from \"../../../utils/isNumber\";\r\nimport { ExpressionType } from \"../../calculateResult/calculateResult\";\r\nimport { ExprStructureType } from \"../../calculateResult/parseSymbols\";\r\nimport CommonOperationClass, { CommonOperationInterface } from '../commonOperationClass';\r\n\r\nexport interface CalcOperationClassInterface extends CommonOperationInterface {\r\n    readonly operationName: string,\r\n    readonly symbol: string,\r\n    readonly priority: number,\r\n    readonly exSymbols?: Array<string>,\r\n\r\n    readonly canBePlacedAfterOtherOperation: boolean,\r\n    readonly canBePlacedBeforeOtherOperation: boolean,\r\n    readonly hasOwnFullCalculateFunc: boolean,\r\n\r\n    parseCheck(exprStructure: ExprStructureType, index: number): void,\r\n\r\n    getRightNum(exprStructure: ExprStructureType, index: number): {\r\n        rightNum?: number | CalcOperationClass | ExprStructureType,\r\n        isExistRightNum?: boolean,\r\n    },\r\n    getLeftNum(exprStructure: ExprStructureType, index: number): {\r\n        leftNum?: number | CalcOperationClass | ExprStructureType,\r\n        isExistLeftNum?: boolean,\r\n    },\r\n    getPrevExprElem(exprStructure: ExprStructureType, index: number): {\r\n        prevExprElem?: number | CalcOperationClass | ExprStructureType,\r\n        isExistPrevExprElem?: boolean,\r\n    },\r\n    getNextExprElem(exprStructure: ExprStructureType, index: number): {\r\n        nextExprElem?: number | CalcOperationClass | ExprStructureType,\r\n        isExistNextExprElem?: boolean,\r\n    },\r\n\r\n    argumentsNotFound(exprStructure: ExprStructureType, index: number): void,\r\n    stepByStepOperations(exprStructure: ExprStructureType, index: number): void,\r\n    numOnRightMustBe(isExistLeftNum: boolean | undefined): void,\r\n    numOnRightMustNotBe(isExistLeftNum: boolean | undefined): void,\r\n    exprOnLeftMustNotBeNum(isExistLeftNum: boolean | undefined): void,\r\n\r\n    calculate(params: any): ExpressionType,\r\n}\r\n\r\nexport default class CalcOperationClass extends CommonOperationClass implements CalcOperationClassInterface {\r\n    constructor(\r\n        readonly operationName: string,\r\n        readonly symbol: string,\r\n        readonly priority: number,\r\n        readonly exSymbols: Array<string> = [],\r\n    ) {\r\n        super(symbol, exSymbols);\r\n        this.operationName = operationName;\r\n        this.priority = priority;\r\n    }\r\n\r\n    readonly canBePlacedAfterOtherOperation: boolean = false;\r\n    readonly canBePlacedBeforeOtherOperation: boolean = false;\r\n\r\n    readonly hasOwnFullCalculateFunc: boolean = false;\r\n\r\n\r\n    parseCheck(exprStructure: ExprStructureType, index: number): void {\r\n        this.argumentsNotFound(exprStructure, index);\r\n    }\r\n\r\n    getRightNum(exprStructure: ExprStructureType, index: number): {\r\n        rightNum?: number | CalcOperationClass | ExprStructureType,\r\n        isExistRightNum?: boolean,\r\n    } {\r\n        const rightNumIndex = index + 1;\r\n        const isExistRightNum = (rightNumIndex < exprStructure.length) && isNumber(exprStructure[rightNumIndex]);\r\n\r\n        if (isExistRightNum) {\r\n            const rightNum = exprStructure[rightNumIndex];\r\n\r\n            return { rightNum, isExistRightNum };\r\n        }\r\n\r\n        return { isExistRightNum };\r\n    }\r\n\r\n    getLeftNum(exprStructure: ExprStructureType, index: number): {\r\n        leftNum?: number | CalcOperationClass | ExprStructureType,\r\n        isExistLeftNum?: boolean,\r\n    } {\r\n        const leftNumIndex = index - 1;\r\n        const isExistLeftNum = (leftNumIndex >= 0) && isNumber(exprStructure[leftNumIndex]);\r\n\r\n        if (isExistLeftNum) {\r\n            const leftNum = exprStructure[leftNumIndex];\r\n\r\n            return { leftNum, isExistLeftNum };\r\n        }\r\n\r\n        return { isExistLeftNum };\r\n    }\r\n\r\n    getPrevExprElem(exprStructure: ExprStructureType, index: number): {\r\n        prevExprElem?: number | CalcOperationClass | ExprStructureType,\r\n        isExistPrevExprElem?: boolean,\r\n    } {\r\n        const prevExprElemIndex = index - 1;\r\n\r\n        const isExistPrevExprElem = prevExprElemIndex >= 0;\r\n\r\n        if (isExistPrevExprElem) {\r\n            const prevExprElem = exprStructure[prevExprElemIndex];\r\n\r\n            return { prevExprElem, isExistPrevExprElem };\r\n        }\r\n\r\n        return { isExistPrevExprElem };\r\n    }\r\n\r\n    getNextExprElem(exprStructure: ExprStructureType, index: number): {\r\n        nextExprElem?: number | CalcOperationClass | ExprStructureType,\r\n        isExistNextExprElem?: boolean,\r\n    } {\r\n        const nextExprElemIndex = index + 1;\r\n\r\n        const isExistNextExprElem = nextExprElemIndex < exprStructure.length;\r\n\r\n        if (isExistNextExprElem)\r\n            return { nextExprElem: exprStructure[nextExprElemIndex], isExistNextExprElem };\r\n\r\n        return { isExistNextExprElem };\r\n    }\r\n\r\n    // common parse checkers\r\n    argumentsNotFound(exprStructure: ExprStructureType, index: number): void {\r\n        const { prevExprElem, isExistPrevExprElem } = this.getPrevExprElem(exprStructure, index);\r\n        const { nextExprElem, isExistNextExprElem } = this.getNextExprElem(exprStructure, index);\r\n\r\n        if (\r\n            !(\r\n                (isExistPrevExprElem || isExistNextExprElem) && (\r\n                    (\r\n                        isNumber(prevExprElem)\r\n                        || this.canBePlacedAfterOtherOperation\r\n                        || (\r\n                            isExistNextExprElem\r\n                            && nextExprElem instanceof CalcOperationClass\r\n                            && nextExprElem.canBePlacedBeforeOtherOperation\r\n                        )\r\n                    ) || (\r\n                        isNumber(nextExprElem)\r\n                        || this.canBePlacedBeforeOtherOperation\r\n                        || (\r\n                            isExistNextExprElem\r\n                            && nextExprElem instanceof CalcOperationClass\r\n                            && nextExprElem.canBePlacedAfterOtherOperation\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        ) {\r\n            throw new Error(`Arguments for ${this.operationName} not found`);\r\n        }\r\n    }\r\n    stepByStepOperations(exprStructure: ExprStructureType, index: number): void {\r\n        const { prevExprElem, isExistPrevExprElem } = this.getPrevExprElem(exprStructure, index);\r\n        const { nextExprElem, isExistNextExprElem } = this.getNextExprElem(exprStructure, index);\r\n\r\n        if (\r\n            (\r\n                isExistPrevExprElem\r\n                && prevExprElem instanceof CalcOperationClass\r\n                && !prevExprElem.canBePlacedBeforeOtherOperation\r\n                && !this.canBePlacedAfterOtherOperation\r\n            ) || (\r\n                isExistNextExprElem\r\n                && nextExprElem instanceof CalcOperationClass\r\n                && !nextExprElem.canBePlacedAfterOtherOperation\r\n                && !this.canBePlacedBeforeOtherOperation\r\n            )\r\n        ) {\r\n            throw new Error(`The ${this.operationName} cannot be performed before other operation`);\r\n        }\r\n    }\r\n    numOnRightMustBe(isExistRightNum: boolean | undefined): void {\r\n        if (!isExistRightNum)\r\n            throw new Error(`The ${this.operationName} operation need an argument on the right`);\r\n    }\r\n    numOnRightMustNotBe(isExistRightNum: boolean | undefined): void {\r\n        if (isExistRightNum)\r\n            throw new Error(`The ${this.operationName} operation mustn't has a number on the right`);\r\n    }\r\n    exprOnLeftMustNotBeNum(isExistLeftNum: boolean | undefined): void {\r\n        if (isExistLeftNum)\r\n            throw new Error(`The ${this.operationName} operation mustn't has any number on the left`);\r\n    }\r\n\r\n\r\n    calculate(params: any): ExpressionType { return []; }\r\n};","import addition from './operations/addition';\r\nimport division from './operations/division';\r\nimport multiplication from './operations/multiplication';\r\nimport percent from './operations/percent';\r\nimport squareRoot from './operations/squareRoot';\r\nimport subtraction from './operations/subtraction';\r\n\r\nconst calcOperations = {\r\n    addition, division, multiplication,\r\n    percent, squareRoot, subtraction,\r\n};\r\n\r\nexport default calcOperations;","import { ExpressionType } from \"../../../calculateResult/calculateResult\";\r\nimport { ExprStructureType } from \"../../../calculateResult/parseSymbols\";\r\nimport CalcOperationClass from \"../calcOperationClass\";\r\n\r\nclass Addition extends CalcOperationClass {\r\n    calculate(params: { leftArg: number | null, rightArg: number | null }): ExpressionType {\r\n        const leftNumber = params.leftArg !== null ? params.leftArg : 0;\r\n        const rightNumber = params.rightArg !== null ? params.rightArg : 0;\r\n        \r\n        return [leftNumber + rightNumber];\r\n    }\r\n\r\n    parseCheck(exprStructure: ExprStructureType, index: number): void {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        this.stepByStepOperations(exprStructure, index);\r\n    }\r\n}\r\n\r\nconst addition = new Addition('addition', '+', 0);\r\n\r\nexport default addition;","import isNumber from \"../../../../utils/isNumber\";\r\nimport { ExpressionType } from \"../../../calculateResult/calculateResult\";\r\nimport { ExprStructureType } from \"../../../calculateResult/parseSymbols\";\r\nimport CalcOperationClass from \"../calcOperationClass\";\r\n\r\nclass Division extends CalcOperationClass {\r\n    calculate(params: { leftArg: number | null, rightArg: number | null }): ExpressionType {\r\n        const leftNumber = params.leftArg !== null ? params.leftArg : 1;\r\n        const rightNumber = params.rightArg !== null ? params.rightArg : 1;\r\n        \r\n        return [leftNumber / rightNumber];\r\n    }\r\n\r\n    parseCheck(exprStructure: ExprStructureType, index: number): void {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        const { rightNum } = this.getRightNum(exprStructure, index);\r\n\r\n        this.stepByStepOperations(exprStructure, index);\r\n\r\n        if (isNumber(rightNum))\r\n            this.divideByZero(rightNum);\r\n    }\r\n\r\n    // custom parse checkers\r\n    divideByZero(rightNum: number): void {\r\n        if (rightNum === 0) {\r\n            throw new Error('You cannot divide by zero');\r\n        }\r\n    }\r\n}\r\n\r\nconst division = new Division('division', '/', 1);\r\n\r\nexport default division;","import { ExpressionType } from \"../../../calculateResult/calculateResult\";\r\nimport { ExprStructureType } from \"../../../calculateResult/parseSymbols\";\r\nimport CalcOperationClass from \"../calcOperationClass\";\r\n\r\nclass Multiplication extends CalcOperationClass {\r\n    calculate(params: { leftArg: number | null, rightArg: number | null }): ExpressionType {\r\n        const leftNumber = params.leftArg !== null ? params.leftArg : 1;\r\n        const rightNumber = params.rightArg !== null ? params.rightArg : 1;\r\n        \r\n        return [leftNumber * rightNumber];\r\n    }\r\n\r\n    parseCheck(exprStructure: ExprStructureType, index: number): void {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        this.stepByStepOperations(exprStructure, index);\r\n    }\r\n}\r\n\r\nconst multiplication = new Multiplication('multiplication', '×', 1, ['*']);\r\n\r\nexport default multiplication;","import arrayHelper from \"../../../../utils/arrayHelper\";\r\nimport isNumber from \"../../../../utils/isNumber\";\r\nimport { CalculateExprInterface, ExpressionType } from \"../../../calculateResult/calculateResult\";\r\nimport { ExprStructureType } from \"../../../calculateResult/parseSymbols\";\r\nimport CalcOperationClass from \"../calcOperationClass\";\r\n\r\nclass Percent extends CalcOperationClass {\r\n    readonly canBePlacedBeforeOtherOperation: boolean = true;\r\n    readonly hasOwnFullCalculateFunc: boolean = true;\r\n\r\n    parseCheck(exprStructure: ExprStructureType, index: number): void {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        const { isExistRightNum } = this.getRightNum(exprStructure, index);\r\n\r\n        this.numOnRightMustNotBe(isExistRightNum);\r\n    }\r\n\r\n    calculate(\r\n        params: {\r\n            expr: ExpressionType,\r\n            calculateExpr: (params: CalculateExprInterface) => number,\r\n            operationIndex: number,\r\n        }\r\n    ): ExpressionType {\r\n        const { expr, calculateExpr, operationIndex } = params;\r\n\r\n        // checking operation before (on the left) this operation\r\n        // (there is should be only one operation with priority = 0 or no one at all)\r\n        if (!(1 <= operationIndex && operationIndex <= 3)) {\r\n            // if false we need to calc part of expression on the left\r\n            const exprLastIndexToCalc = operationIndex - 2;\r\n            const newLeftPart = calculateExpr({ expr: expr.slice(0, exprLastIndexToCalc), index: 0 });\r\n\r\n            const newExprStructure = [\r\n                newLeftPart,\r\n                ...expr.slice(exprLastIndexToCalc),\r\n            ];\r\n            const newOperationIndex = 3;\r\n\r\n            return this.calculate({ expr: newExprStructure, calculateExpr, operationIndex: newOperationIndex });\r\n        }\r\n\r\n        const mainNumIndex = operationIndex - 3;\r\n        const isExistMainNum = (mainNumIndex >= 0);\r\n        const mainNum = isExistMainNum ? expr[mainNumIndex] : 1;\r\n\r\n        const secondaryNumIndex = operationIndex - 1;\r\n        const secondaryNum = expr[secondaryNumIndex];\r\n\r\n        if (isNumber(mainNum) && isNumber(secondaryNum)) {\r\n            const result: number = mainNum / 100 * secondaryNum;\r\n\r\n            const newExprStructure = arrayHelper.changeItemsOnItem(\r\n                expr, result, secondaryNumIndex - 1, operationIndex + 1\r\n            );\r\n\r\n            return newExprStructure;\r\n        }\r\n\r\n        throw new Error('Some of percent operation arguments is not a number');\r\n    };\r\n}\r\n\r\nconst percent = new Percent('percent', '%', 2);\r\n\r\nexport default percent;","import { ExpressionType } from \"../../../calculateResult/calculateResult\";\r\nimport { ExprStructureType } from \"../../../calculateResult/parseSymbols\";\r\nimport CalcOperationClass from \"../calcOperationClass\";\r\n\r\nclass SquareRoot extends CalcOperationClass {\r\n    readonly canBePlacedAfterOtherOperation: boolean = true;\r\n    readonly canBePlacedBeforeOtherOperation: boolean = true;\r\n\r\n    calculate(params: { leftArg: number | null, rightArg: number | null }): ExpressionType {\r\n        const leftNumber = params.leftArg !== null ? params.leftArg : 1;\r\n        const rightNumber = params.rightArg !== null ? params.rightArg : 1;\r\n        \r\n        return [leftNumber * Math.pow(rightNumber, 0.5)];\r\n    }\r\n\r\n    parseCheck(exprStructure: ExprStructureType, index: number): void {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        const { isExistLeftNum } = this.getLeftNum(exprStructure, index);\r\n        const { isExistRightNum } = this.getRightNum(exprStructure, index);\r\n\r\n        this.numOnRightMustBe(isExistRightNum);\r\n        this.exprOnLeftMustNotBeNum(isExistLeftNum);\r\n    }\r\n}\r\n\r\nconst squareRoot = new SquareRoot('square root', '√', 2);\r\n\r\nexport default squareRoot;","import { ExpressionType } from \"../../../calculateResult/calculateResult\";\r\nimport { ExprStructureType } from \"../../../calculateResult/parseSymbols\";\r\nimport CalcOperationClass from \"../calcOperationClass\";\r\n\r\nclass Subtraction extends CalcOperationClass {\r\n    calculate(params: { leftArg: number | null, rightArg: number | null }): ExpressionType {\r\n        const leftNumber = params.leftArg !== null ? params.leftArg : 0;\r\n        const rightNumber = params.rightArg !== null ? params.rightArg : 0;\r\n        \r\n        return [leftNumber - rightNumber];\r\n    }\r\n\r\n    parseCheck(exprStructure: ExprStructureType, index: number): void {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        this.stepByStepOperations(exprStructure, index);\r\n    }\r\n}\r\n\r\nconst subtraction = new Subtraction('subtraction', '-', 0);\r\n\r\nexport default subtraction;","import CalcOperationClass from './calcOperationClass';\r\nimport calcOperations from './calcOperations';\r\n\r\nconst findOperationBySymbol = (symbol: string): CalcOperationClass | undefined => (\r\n    Object.values(calcOperations)\r\n        .find((operation) => operation.checkIsOperation(symbol))\r\n);\r\n\r\nexport default findOperationBySymbol;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst eight = new CommonOperationClass('8');\r\n\r\nexport default eight;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst five = new CommonOperationClass('5');\r\n\r\nexport default five;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst four = new CommonOperationClass('4');\r\n\r\nexport default four;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst nine = new CommonOperationClass('9');\r\n\r\nexport default nine;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst one = new CommonOperationClass('1');\r\n\r\nexport default one;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst seven = new CommonOperationClass('7');\r\n\r\nexport default seven;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst six = new CommonOperationClass('6');\r\n\r\nexport default six;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst three = new CommonOperationClass('3');\r\n\r\nexport default three;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst two = new CommonOperationClass('2');\r\n\r\nexport default two;","import { CommonOperationInterface } from '../commonOperationClass';\r\nimport eight from './numbers/default/eight';\r\nimport five from './numbers/default/five';\r\nimport four from './numbers/default/four';\r\nimport nine from './numbers/default/nine';\r\nimport one from './numbers/default/one';\r\nimport seven from './numbers/default/seven';\r\nimport six from './numbers/default/six';\r\nimport three from './numbers/default/three';\r\nimport two from './numbers/default/two';\r\nimport zero from './numbers/default/zero';\r\nimport doubleZero from './numbers/doubleZero';\r\nimport comma from './otherInputs/comma';\r\n\r\ninterface NumbersInputsInterface {\r\n    [key: string]: CommonOperationInterface,\r\n}\r\n\r\nconst numbersInputs: NumbersInputsInterface = {\r\n    zero, one, two, three, four, five, six, seven, eight, nine, doubleZero, comma\r\n};\r\n\r\nexport default numbersInputs;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst zero = new CommonOperationClass('0');\r\n\r\nexport default zero;","import CommonOperationClass from '../../commonOperationClass';\r\n\r\nconst doubleZero = new CommonOperationClass('00');\r\n\r\nexport default doubleZero;","import CommonOperationClass from '../../commonOperationClass';\r\n\r\nclass Comma extends CommonOperationClass {\r\n    getMathCorrectSymbol(): string {\r\n        return this.exSymbols[0];\r\n    }\r\n}\r\n\r\nconst comma = new Comma(',', ['.']);\r\n\r\nexport default comma;","import { CommonOperationInterface } from '../commonOperationClass';\r\nimport numbersInputs from './numbersInputs';\r\n\r\nconst findNumberInputBySymbol = (symbol: string): CommonOperationInterface | undefined => (\r\n    Object.values(numbersInputs)\r\n        .find((numberInput) => numberInput.checkIsOperation(symbol))\r\n);\r\n\r\nexport default findNumberInputBySymbol;","import parentheses from './parentheses';\r\nimport { ParenthesisInterface } from './parenthesisClass';\r\n\r\nconst findParenthesis = (symbol: string): ParenthesisInterface | undefined => (\r\n    Object.values(parentheses)\r\n        .find((parenthesis) => parenthesis.checkIsOperation(symbol))\r\n);\r\n\r\nexport default findParenthesis;","import arrayHelper from '../../utils/arrayHelper';\r\nimport isNumber from '../../utils/isNumber';\r\nimport CalcOperationClass from '../operations/calculateOperations/calcOperationClass';\r\nimport findOperationBySymbol from '../operations/calculateOperations/findOperationBySymbol';\r\nimport findNumberInputBySymbol from '../operations/numbersInputs/findNumberInputBySymbol';\r\nimport findParenthesis from '../operations/parentheses/findParenthesis';\r\n\r\nexport type ExprStructureType = Array<number | CalcOperationClass | ExprStructureType>;\r\n\r\nconst checkParenthesisPairFinder = (count: number, checkType?: string): void => {\r\n    const errorMessage = 'Some parenthesis pair not found';\r\n\r\n    switch (checkType) {\r\n        case 'result': {\r\n            if (count !== 0)\r\n                throw new Error(errorMessage);\r\n            break;\r\n        }\r\n        case 'onClose': {\r\n            if (!(count > 0))\r\n                throw new Error(errorMessage);\r\n            break;\r\n        }\r\n        default: {\r\n            if (count < 0)\r\n                throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasStringExprStructure(\r\n    exprStructure: ExprStructureTypeWithString\r\n): exprStructure is ExprStructureTypeWithString {\r\n    return !!exprStructure.find(exprChild => {\r\n        if (exprChild instanceof Array)\r\n            return hasStringExprStructure(exprChild);\r\n\r\n        return typeof exprChild === 'string';\r\n    });\r\n};\r\n\r\n\r\ntype ExprStructureTypeWithString = Array<number | CalcOperationClass | ExprStructureType | string>;\r\n\r\ninterface ParseInterface {\r\n    symbols: Array<string>,\r\n    index: number,\r\n    parenthesisPairFinder: number,\r\n    exprStructure: ExprStructureTypeWithString,\r\n}\r\n\r\nconst parse = (\r\n    symbols: Array<string>,\r\n    index: number = 0,\r\n    parenthesisPairFinder: number = 0,\r\n    exprStructure: ExprStructureTypeWithString = [],\r\n): ExprStructureType | ParseInterface => {\r\n\r\n    const symbol = symbols[index];\r\n\r\n    if (!symbol) {\r\n        checkParenthesisPairFinder(parenthesisPairFinder, 'result');\r\n\r\n        if (hasStringExprStructure(exprStructure))\r\n            throw new Error('Programming error: expression structure contain \"string\" in \"parseSymbols\" function');\r\n        return exprStructure;\r\n    }\r\n\r\n    // parse parentheses\r\n    checkParenthesisPairFinder(parenthesisPairFinder);\r\n    const parenthesis = findParenthesis(symbol);\r\n    if (parenthesis) {\r\n        if (parenthesis.getType() === 'open') {\r\n            const parseResult = parse(symbols, index + 1, parenthesisPairFinder + 1);\r\n\r\n            if (Array.isArray(parseResult))\r\n                return parseResult;\r\n\r\n            const {\r\n                index: closeParenthesisIndex,\r\n                parenthesisPairFinder: newParenthesisPairFinder,\r\n                exprStructure: thisParenthesesExprStructure,\r\n            } = parseResult;\r\n\r\n            const newExprStructure = arrayHelper.changeItemsOnItem(\r\n                exprStructure, thisParenthesesExprStructure, index - 1\r\n            );\r\n\r\n            return parse(\r\n                symbols, closeParenthesisIndex + 1, newParenthesisPairFinder, newExprStructure\r\n            );\r\n        }\r\n        if (parenthesis.getType() === 'close') {\r\n            checkParenthesisPairFinder(parenthesisPairFinder, 'onClose');\r\n            return {\r\n                symbols,\r\n                index,\r\n                parenthesisPairFinder: parenthesisPairFinder - 1,\r\n                exprStructure: exprStructure,\r\n            };\r\n        }\r\n    }\r\n\r\n    // parse numbers inputs\r\n    const numberInput = findNumberInputBySymbol(symbol);\r\n    if (numberInput) {\r\n        const correctSymbol = numberInput.getMathCorrectSymbol();\r\n\r\n        const lastIndex = exprStructure.length - 1;\r\n        const isExistLastElement = exprStructure.length > 0;\r\n        const lastElement = exprStructure[lastIndex];\r\n        const nextSymbolIndex = index + 1;\r\n        const isNextSymbolNumber = !!findNumberInputBySymbol(symbols[nextSymbolIndex]);\r\n\r\n        if (isExistLastElement && isNumber(Number.parseFloat(lastElement.toString()))) {\r\n            const newLastElement = lastElement + correctSymbol;\r\n            const exprStructureWithOutLastElem = exprStructure.slice(0, lastIndex);\r\n\r\n            if (!isNextSymbolNumber)\r\n                return parse(\r\n                    symbols, index + 1, parenthesisPairFinder,\r\n                    [...exprStructureWithOutLastElem, Number.parseFloat(newLastElement)],\r\n                );\r\n\r\n            return parse(symbols, index + 1, parenthesisPairFinder, [...exprStructureWithOutLastElem, newLastElement]);\r\n        }\r\n\r\n        if (!isNextSymbolNumber)\r\n            return parse(\r\n                symbols, index + 1, parenthesisPairFinder, [...exprStructure, Number.parseFloat(correctSymbol)]\r\n            );\r\n\r\n        return parse(symbols, index + 1, parenthesisPairFinder, [...exprStructure, correctSymbol]);\r\n    }\r\n\r\n    // parse calc operations\r\n    const operation = findOperationBySymbol(symbol);\r\n    if (operation)\r\n        return parse(symbols, index + 1, parenthesisPairFinder, [...exprStructure, operation]);\r\n\r\n    throw new Error(`Unknown symbol: \" ${symbol} \"`);\r\n};\r\n\r\nconst checkByOperationsCheckers = (exprStructure: ExprStructureType, index: number = 0): void => {\r\n    if (index === exprStructure.length)\r\n        return;\r\n\r\n    const element = exprStructure[index];\r\n\r\n    if (Array.isArray(element)) {\r\n        checkByOperationsCheckers(element);\r\n        return;\r\n    }\r\n\r\n    if (!isNumber(element))\r\n        element.parseCheck(exprStructure, index);\r\n\r\n    checkByOperationsCheckers(exprStructure, index + 1);\r\n};\r\n\r\nconst parseSymbols = (symbols: string): ExprStructureType => {\r\n    const exprStructure = parse(symbols.split(''));\r\n\r\n    if (!Array.isArray(exprStructure))\r\n        throw new Error('Programming error: expression structure is not an array in \"parseSymbols\" function');\r\n\r\n    checkByOperationsCheckers(exprStructure);\r\n\r\n    return exprStructure;\r\n};\r\n\r\nexport default parseSymbols;","import arrayHelper from '../../utils/arrayHelper';\r\nimport isNumber from '../../utils/isNumber';\r\nimport CalcOperationClass from '../operations/calculateOperations/calcOperationClass';\r\nimport parseSymbols, { ExprStructureType } from './parseSymbols';\r\n\r\n\r\nexport type ExpressionType = Array<number | CalcOperationClass>;\r\n\r\nexport interface CalculateExprInterface {\r\n    expr: ExpressionType,\r\n    index?: number,\r\n    maxPriority?: number,\r\n    maxPriorityOperationIndex?: number | null,\r\n    [key: string]: ExpressionType | number | null | undefined,\r\n};\r\n\r\nconst calculateExprDefValues: CalculateExprInterface = {\r\n    expr: [],\r\n    index: 0,\r\n    maxPriority: -1,\r\n    maxPriorityOperationIndex: null,\r\n};\r\n\r\nconst calculateExpr = (params: CalculateExprInterface): number => {\r\n    const setDefaultValues = (params: CalculateExprInterface): CalculateExprInterface => (\r\n        Object.entries(calculateExprDefValues)\r\n            .reduce((acc, [key, defValue]) => {\r\n                if (typeof params[key] === 'undefined') {\r\n                    return { ...acc, [key]: defValue }\r\n                }\r\n                return { ...acc, [key]: params[key] }\r\n            }, { expr: params.expr })\r\n    );\r\n\r\n    const {\r\n        expr,\r\n        index,\r\n        maxPriority,\r\n        maxPriorityOperationIndex,\r\n    } = setDefaultValues(params);\r\n\r\n    if (typeof index === 'undefined'\r\n        || typeof maxPriority === 'undefined'\r\n        || typeof maxPriorityOperationIndex === 'undefined'\r\n    ) {\r\n        throw new Error('Programming error: default values didn\\'t set in \"calculateExpr\" function');\r\n    }\r\n\r\n    if (expr.length === 0) {\r\n        return 0;\r\n    }\r\n\r\n    if (expr.length === 1) {\r\n        if (expr[0] instanceof CalcOperationClass) {\r\n            throw new Error('Programming error: expected a number but got an operation in \"calculateExpr\" function');\r\n        }\r\n\r\n        return expr[0];\r\n    }\r\n\r\n    if (index === expr.length && isNumber(maxPriorityOperationIndex)) {\r\n        const operation = expr[maxPriorityOperationIndex];\r\n\r\n        if (!(operation instanceof CalcOperationClass))\r\n            throw new Error('Programming error: the number took for the operation in \"calculateExpr\" function');\r\n\r\n        if (operation.hasOwnFullCalculateFunc) {\r\n            const newExprStructure = operation.calculate(\r\n                { expr, calculateExpr, operationIndex: maxPriorityOperationIndex }\r\n            );\r\n            return calculateExpr({ expr: newExprStructure, index: 0 });\r\n        }\r\n\r\n        const leftNumIndex = maxPriorityOperationIndex - 1;\r\n        const isExistLeftNum = (leftNumIndex >= 0) && isNumber(expr[leftNumIndex]);\r\n        const leftArg = isExistLeftNum ? expr[leftNumIndex] : null;\r\n\r\n        const rightNumIndex = maxPriorityOperationIndex + 1;\r\n        const isExistRightNum = (rightNumIndex < index) && isNumber(expr[rightNumIndex]);\r\n        const rightArg = isExistRightNum ? expr[rightNumIndex] : null;\r\n\r\n        const [result] = operation.calculate({ leftArg, rightArg });\r\n\r\n        const leftBorderIndex = isExistLeftNum ? leftNumIndex - 1 : leftNumIndex;\r\n        const rightBorderIndex = isExistRightNum ? rightNumIndex + 1 : rightNumIndex;\r\n        const newExprStructure = arrayHelper.changeItemsOnItem(expr, result, leftBorderIndex, rightBorderIndex);\r\n\r\n        return calculateExpr({ expr: newExprStructure, index: 0 });\r\n    }\r\n\r\n    const exprChild = expr[index];\r\n\r\n    if (isNumber(exprChild))\r\n        return calculateExpr({ expr, index: index + 1, maxPriority, maxPriorityOperationIndex });\r\n\r\n    // else exprChild is operation\r\n    const currentPriority = exprChild.priority;\r\n    if (currentPriority > maxPriority)\r\n        return calculateExpr(\r\n            { expr, index: index + 1, maxPriority: currentPriority, maxPriorityOperationIndex: index }\r\n        );\r\n\r\n    return calculateExpr({ expr, index: index + 1, maxPriority, maxPriorityOperationIndex });\r\n};\r\n\r\nconst makeCalculations = (exprStructure: ExprStructureType): number => {\r\n    if (isNumber(exprStructure))\r\n        return exprStructure;\r\n\r\n    const exprStructureWithOutParentheses: ExpressionType = exprStructure.map(\r\n        (exprChild: number | CalcOperationClass | ExprStructureType): number | CalcOperationClass => (\r\n            Array.isArray(exprChild) ? makeCalculations(exprChild) : exprChild\r\n        )\r\n    );\r\n\r\n    return calculateExpr({ expr: exprStructureWithOutParentheses });\r\n};\r\n\r\nconst calculateResult = (expression: string): string => {\r\n    try {\r\n        const exprStructure = parseSymbols(expression);\r\n\r\n        const result: number = makeCalculations(exprStructure);\r\n\r\n        const formattedResult = result.toString().split('')\r\n            .map(number => number === '.' ? ',' : number)\r\n            .reduce((acc, number) => `${acc}${number}`);\r\n\r\n        return formattedResult;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport default calculateResult;","import CommonOperationClass from '../../commonOperationClass';\r\n\r\nconst calculate = new CommonOperationClass('=');\r\n\r\nexport default calculate;","import CommonOperationClass from '../../commonOperationClass';\r\n\r\nconst clean = new CommonOperationClass('C');\r\n\r\nexport default clean;","import parenthesesOperations from '../../calculatorFunctional/operations/parentheses/parentheses';\r\nimport calculateResult from './../../calculatorFunctional/calculateResult/calculateResult';\r\nimport calcOperations from './../../calculatorFunctional/operations/calculateOperations/calcOperations';\r\nimport defaultOperations from './../../calculatorFunctional/operations/defaultOperations/defaultOperations';\r\nimport numbersInputs from './../../calculatorFunctional/operations/numbersInputs/numbersInputs';\r\n\r\nconst SET_INPUT = 'calcReducer/SET_INPUT';\r\nconst ADD_SYMBOL = 'calcReducer/ADD_SYMBOL';\r\nconst CLEAN = 'calcReducer/CLEAN';\r\nconst CALCULATE = 'calcReducer/CALCULATE';\r\nconst DELETE_LAST_SYMBOL = 'calcReducer/DELETE_LAST_SYMBOL';\r\n\r\nconst initialState = {\r\n    input: '',\r\n    expression: null,\r\n    numbersInputs,\r\n    defaultOperations,\r\n    parenthesesOperations,\r\n    calcOperations,\r\n    error: null,\r\n}\r\n\r\nconst calcReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_INPUT:\r\n            return ({ ...state, ...action.payload });\r\n        case ADD_SYMBOL:\r\n            return ({ ...state, input: `${state.input}${action.symbol}` });\r\n        case CLEAN:\r\n            return ({ ...state, input: '', expression: null, error: null });\r\n        case DELETE_LAST_SYMBOL:\r\n            return ({ ...state, input: state.input.slice(0, state.input.length - 1) });\r\n        case CALCULATE:\r\n            try {\r\n                const expression = state.input;\r\n                const result = calculateResult(expression);\r\n                return ({ ...state, input: result, expression, error: null });\r\n            } catch (error) {\r\n                return ({ ...state, error: error.message });\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setInput = (input) => ({ type: SET_INPUT, payload: { input } });\r\nexport const addSymbol = (symbol) => ({ type: ADD_SYMBOL, symbol });\r\nexport const calculate = () => ({ type: CALCULATE });\r\nexport const clean = () => ({ type: CLEAN });\r\nexport const deleteLastSymbol = () => ({ type: DELETE_LAST_SYMBOL });\r\n\r\nexport default calcReducer;","\r\nimport { CommonOperationInterface } from '../commonOperationClass';\r\nimport calculate from './operations/calculate';\r\nimport clean from './operations/clean';\r\n\r\ninterface DefaultOperationsInterface {\r\n    [key: string]: CommonOperationInterface,\r\n}\r\n\r\nconst defaultOperations: DefaultOperationsInterface = { clean, calculate };\r\n\r\nexport default defaultOperations;","import { createSelector } from \"reselect\";\r\n\r\nexport const getInput = (state) => state.calc.input;\r\nexport const getExpression = (state) => state.calc.expression;\r\nexport const getError = (state) => state.calc.error;\r\n\r\n\r\nconst format = (symbol, exSymbols, funcName = null, isInvert = false) => ({\r\n    symbol,\r\n    exSymbols,\r\n    funcName: funcName ? funcName : 'addSymbol',\r\n    isInvert,\r\n});\r\nconst formatOperations = (operations, customOperations = {}) => (\r\n    Object.entries(operations)\r\n        .reduce((acc, [name, operation]) => (\r\n            {\r\n                ...acc, [name]: format(\r\n                    operation.getSymbol(),\r\n                    operation.getExSymbols(),\r\n                    customOperations[name] ? customOperations[name].funcName : null,\r\n                    customOperations[name] ? customOperations[name].isInvert : null,\r\n                )\r\n            }\r\n        ), {})\r\n);\r\n\r\nconst getNumbersInputsPrimitive = (state) => state.calc.numbersInputs;\r\nexport const getNumbersInputs = createSelector(\r\n    getNumbersInputsPrimitive,\r\n    (numberInputs) => formatOperations(numberInputs),\r\n);\r\n\r\nconst getParenthesesOperationsPrimitive = (state) => state.calc.parenthesesOperations;\r\nexport const getParenthesesOperations = createSelector(\r\n    getParenthesesOperationsPrimitive,\r\n    (parenthesesOperations) => formatOperations(parenthesesOperations),\r\n);\r\n\r\nconst getDefaultOperationsPrimitive = (state) => state.calc.defaultOperations;\r\nexport const getDefaultOperations = createSelector(\r\n    getDefaultOperationsPrimitive,\r\n    (operations) => formatOperations(operations, {\r\n        clean: {\r\n            funcName: 'clean',\r\n        },\r\n        calculate: {\r\n            funcName: 'calculate',\r\n            isInvert: true,\r\n        },\r\n    }),\r\n);\r\n\r\nconst getCalcOperationsPrimitive = (state) => state.calc.calcOperations;\r\nexport const getCalcOperations = createSelector(\r\n    getCalcOperationsPrimitive,\r\n    (operations) => formatOperations(operations),\r\n);","import { combineReducers, compose, createStore } from \"redux\";\r\nimport calcReducer from './calc/calcReducer';\r\n\r\nconst reducers = combineReducers({\r\n    calc: calcReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers());\r\n\r\nexport default store;","import React, { useEffect } from 'react';\nimport { connect, Provider } from 'react-redux';\nimport './App.module.css';\nimport styles from './App.module.css';\nimport Input from './components/inputPart/Input';\nimport Output from './components/outputPart/Output';\nimport { addSymbol, calculate, clean, deleteLastSymbol, setInput } from './redux/calc/calcReducer';\nimport {\n    getCalcOperations,\n    getDefaultOperations,\n    getError,\n    getExpression, getInput, getNumbersInputs, getParenthesesOperations\n} from './redux/calc/calcSelectors';\nimport store from './redux/store';\n\nconst setFunctions = (operations, inputFuncs) => (\n    Object.entries(operations)\n        .reduce((acc, [operationName, operation]) => {\n            const func = Object.entries(inputFuncs)\n                .find(([funcName]) => funcName === operation.funcName)[1];\n\n            const newOperation = { ...operation, func };\n\n            return { ...acc, [operationName]: newOperation };\n        }, {})\n);\n\nconst getOperationsByBlocks = (defaultOperations, calcOperations, numbersInputs, parenthesesOperations, inputFuncs) => {\n    const { clean, calculate } = setFunctions(defaultOperations, inputFuncs);\n    const { openParenthesis, closeParenthesis } = setFunctions(parenthesesOperations, inputFuncs);\n    const {\n        addition, division, multiplication, percent, squareRoot, subtraction,\n    } = setFunctions(calcOperations, inputFuncs);\n    const {\n        zero, one, two, three, four, five, six, seven, eight, nine, doubleZero, comma,\n    } = setFunctions(numbersInputs, inputFuncs);\n\n    const topLineBlockOpers = [clean, squareRoot, percent];\n    const rightColumnBlockOpers = [division, multiplication, subtraction, addition, calculate];\n    const numbersInputsBlockOpers = [seven, eight, nine, four, five, six, three, two, one, doubleZero, zero, comma];\n    const noBlockOpers = [openParenthesis, closeParenthesis];\n\n    return [topLineBlockOpers, rightColumnBlockOpers, numbersInputsBlockOpers, noBlockOpers];\n};\n\nconst respondOnKeyUp = (key, operations) => (\n    Object.values(operations)\n        .forEach(operation => (\n            (operation.symbol === key || operation.exSymbols.includes(key)) ? operation.func(operation.symbol) : null\n        ))\n);\n\nconst AppComponent = (props) => {\n    const [topLineBlockOpers, rightColumnBlockOpers, numbersInputsBlockOpers, noBlockOpers] = getOperationsByBlocks(\n        props.defaultOperations, props.calcOperations, props.numbersInputs,\n        props.parenthesesOperations, props.inputFuncs,\n    );\n\n    const appWrapperRef = React.createRef();\n    const onEvent = (event) => {\n        if (event.key === 'Enter') {\n            props.inputFuncs.calculate();\n            return;\n        }\n        if (event.currentTarget !== event.target) {\n            event.stopPropagation();\n            return;\n        }\n        if (event.key === 'Backspace') {\n            props.inputFuncs.deleteLastSymbol();\n            return;\n        }\n\n        respondOnKeyUp(event.key, topLineBlockOpers);\n        respondOnKeyUp(event.key, rightColumnBlockOpers);\n        respondOnKeyUp(event.key, numbersInputsBlockOpers);\n        respondOnKeyUp(event.key, noBlockOpers);\n    };\n    useEffect(() => {\n        const appWrapperElement = appWrapperRef.current;\n        appWrapperElement.focus();\n        appWrapperElement.addEventListener('keydown', onEvent);\n\n        return () => {\n            appWrapperElement.removeEventListener('keydown', onEvent);\n        };\n        // eslint-disable-next-line\n    }, []);\n\n    return (\n        <div ref={appWrapperRef} className={styles.app__wrapper} tabIndex={1}>\n            <div className={styles.app}>\n                <div className={styles.app__background}>\n                    <div className={styles.app__container}>\n                        <Output expression={props.expression}\n                            inputVal={props.inputVal}\n                            error={props.error}\n                            onInputChange={(e) => props.setInput(e.currentTarget.value)}\n                        />\n                        <Input numbersInputsBlockOpers={numbersInputsBlockOpers}\n                            topLineBlockOpers={topLineBlockOpers}\n                            rightColumnBlockOpers={rightColumnBlockOpers}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    inputVal: getInput(state),\n    expression: getExpression(state),\n    error: getError(state),\n    numbersInputs: getNumbersInputs(state),\n    parenthesesOperations: getParenthesesOperations(state),\n    defaultOperations: getDefaultOperations(state),\n    calcOperations: getCalcOperations(state),\n});\nconst mapDispatchToProps = (dispatch) => ({\n    setInput: (value) => dispatch(setInput(value)),\n    inputFuncs: {\n        addSymbol: (symbol) => dispatch(addSymbol(symbol)),\n        calculate: () => dispatch(calculate()),\n        clean: () => dispatch(clean()),\n        deleteLastSymbol: () => dispatch(deleteLastSymbol()),\n    },\n});\n\nconst AppComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AppComponent);\n\nconst App = () => (\n    <Provider store={store}>\n        <AppComponentContainer />\n    </Provider>\n);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}