{"version":3,"sources":["components/inputPart/Input.module.css","components/App/App.module.css","components/outputPart/Output.module.css","components/inputPart/Input.tsx","components/outputPart/Output.tsx","utils/arrayHelper.ts","utils/isNumber.ts","calculatorFunctional/operations/commonOperationClass.ts","calculatorFunctional/operations/calculateOperations/calcOperationClass.ts","calculatorFunctional/operations/calculateOperations/validators/checkers/argumentsNotFound.ts","calculatorFunctional/operations/calculateOperations/isInstanceofCalcOperation.ts","calculatorFunctional/operations/calculateOperations/validators/CalcOperationValidatorCreator.ts","calculatorFunctional/operations/calculateOperations/validators/checkers/stepByStepOperations.ts","calculatorFunctional/operations/calculateOperations/validators/checkers/divideByZero.ts","calculatorFunctional/operations/calculateOperations/validators/checkers/numOnRightMustNotBe.ts","calculatorFunctional/operations/calculateOperations/validators/checkers/exprOnLeftMustNotBeNum.ts","calculatorFunctional/operations/calculateOperations/validators/checkers/numOnRightMustBe.ts","calculatorFunctional/operations/calculateOperations/calcOperations.ts","calculatorFunctional/operations/calculateOperations/operations/addition.ts","calculatorFunctional/operations/calculateOperations/operations/division.ts","calculatorFunctional/operations/calculateOperations/operations/multiplication.ts","calculatorFunctional/operations/calculateOperations/operations/percent.ts","calculatorFunctional/operations/calculateOperations/operations/squareRoot.ts","calculatorFunctional/operations/calculateOperations/operations/subtraction.ts","calculatorFunctional/operations/calculateOperations/findOperationBySymbol.ts","calculatorFunctional/operations/numbersInputs/numbers/default/eight.ts","calculatorFunctional/operations/numbersInputs/numbers/default/five.ts","calculatorFunctional/operations/numbersInputs/numbers/default/four.ts","calculatorFunctional/operations/numbersInputs/numbers/default/nine.ts","calculatorFunctional/operations/numbersInputs/numbers/default/one.ts","calculatorFunctional/operations/numbersInputs/numbers/default/seven.ts","calculatorFunctional/operations/numbersInputs/numbers/default/six.ts","calculatorFunctional/operations/numbersInputs/numbers/default/three.ts","calculatorFunctional/operations/numbersInputs/numbers/default/two.ts","calculatorFunctional/operations/numbersInputs/numbers/default/zero.ts","calculatorFunctional/operations/numbersInputs/numbersInputs.ts","calculatorFunctional/operations/numbersInputs/numbers/doubleZero.ts","calculatorFunctional/operations/numbersInputs/otherInputs/comma.ts","calculatorFunctional/operations/numbersInputs/findNumberInputBySymbol.ts","calculatorFunctional/operations/parentheses/parenthesisClass.ts","calculatorFunctional/operations/parentheses/operations/closeParenthesis.ts","calculatorFunctional/operations/parentheses/parentheses.ts","calculatorFunctional/operations/parentheses/operations/openParenthesis.ts","calculatorFunctional/operations/parentheses/findParenthesis.ts","calculatorFunctional/calculateResult/parseSymbols.ts","calculatorFunctional/calculateResult/calculateResult.ts","calculatorFunctional/operations/defaultOperations/operations/calculate.ts","calculatorFunctional/operations/defaultOperations/operations/clean.ts","redux/calc/calcReducer.ts","calculatorFunctional/operations/defaultOperations/defaultOperations.ts","redux/calc/calcSelectors.ts","redux/store.ts","components/App/App.tsx","index.tsx"],"names":["module","exports","Button","symbol","func","isInvert","data-symbol","className","cn","styles","button","invert","onClick","e","currentTarget","dataset","createBtn","data","Input","topLineBlockOpers","rightColumnBlockOpers","numbersInputsBlockOpers","input","topLine","map","rightLine","numbersInputs","Output","expression","inputVal","error","onInputChange","output","value","onChange","arrayHelper","changeItemsOnItem","array","newItemValue","leftBorderIndex","rightBorderIndex","slice","isNumber","isFinite","CommonOperationClass","exSymbols","this","includes","CalcOperationClass","operationName","priority","validators","canBePlacedAfterOtherOperation","canBePlacedBeforeOtherOperation","hasOwnFullCalculateFunc","exprStructure","index","forEach","validator","check","params","argumentsNotFound","operationValidateAPI","prevExprElemValidateAPI","nextExprElemValidateAPI","isExist","isInstanceofCalcOperation","Error","isCalcOperationInstance","object","CalcOperationValidatorCreator","checkMethod","operation","getOperationValidateAPI","leftNumValidateAPI","getLeftNumValidateAPI","rightNumValidateAPI","getRightNumValidateAPI","getPrevExprElemValidateAPI","getNextExprElemValidateAPI","leftNumIndex","result","leftNum","number","rightNumIndex","length","rightNum","prevExprElemIndex","prevExprElem","isInstanceofCalcOperationValue","nextExprElemIndex","nextExprElem","stepByStepOperations","divideByZero","numOnRightMustNotBe","exprOnLeftMustNotBeNum","numOnRightMustBe","calcOperations","addition","leftArg","rightArg","division","multiplication","percent","expr","calculateExpr","operationIndex","exprLastIndexToCalc","newExprStructure","calculate","mainNumIndex","mainNum","secondaryNumIndex","secondaryNum","squareRoot","leftNumber","rightNumber","Math","pow","subtraction","findOperationBySymbol","Object","values","find","checkIsOperation","eight","five","four","nine","one","seven","six","three","two","zero","doubleZero","symbols","reduce","acc","getSymbol","comma","findNumberInputBySymbol","numberInput","ParenthesisClass","type","closeParenthesis","parentheses","openParenthesis","findParenthesis","parenthesis","isExprStructureInstance","exprStructureInstance","Array","isArray","element","checkParenthesisPairFinder","count","checkType","errorMessage","hasStringExprStructure","exprChild","parse","parenthesisPairFinder","getType","parseResult","closeParenthesisIndex","newParenthesisPairFinder","thisParenthesesExprStructure","correctSymbol","getMathCorrectSymbol","lastIndex","isExistLastElement","lastElement","nextSymbolIndex","isNextSymbolNumber","Number","parseFloat","toString","newLastElement","exprStructureWithOutLastElem","validateCalcOperations","validate","parseSymbols","split","calculateExprDefValues","maxPriority","maxPriorityOperationIndex","isExistLeftNum","isExistRightNum","currentPriority","makeCalculations","exprStructureWithOutParentheses","calculateResult","clean","initialState","defaultOperations","parenthesesOperations","calcSlice","createSlice","name","reducers","setInputAction","state","action","payload","addSymbolAction","calculateAction","message","cleanAction","deleteLastSymbolAction","actions","getInput","calc","getExpression","getError","formatOperations","operations","customOperations","entries","getExSymbols","funcName","getNumbersInputs","createSelector","numberInputs","getParenthesesOperations","getDefaultOperations","getCalcOperations","reducer","combineReducers","calcReducer","store","configureStore","setFunctions","inputFuncs","inputFuncArr","newOperation","respondOnKeyUp","key","AppComponentContainer","connect","dispatch","setInput","addSymbol","deleteLastSymbol","props","getOperationsByBlocks","noBlockOpers","appWrapperRef","createRef","onEvent","event","target","stopPropagation","useEffect","appWrapperElement","current","focus","addEventListener","removeEventListener","OutputProps","ref","app__wrapper","tabIndex","app","app__background","app__container","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4a6d4ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__TRnYi\",\"topLine\":\"Input_topLine__3GNZu\",\"rightLine\":\"Input_rightLine__20Wr-\",\"numbersInputs\":\"Input_numbersInputs__fFy6X\",\"button\":\"Input_button__1-Hk5\",\"invert\":\"Input_invert__ydKL6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app__wrapper\":\"App_app__wrapper__2KVRR\",\"app\":\"App_app__1Qq_3\",\"app__background\":\"App_app__background__1vfeK\",\"app__container\":\"App_app__container__2yYAg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"output\":\"Output_output__1fJgL\",\"error\":\"Output_error__1O_Kj\",\"input\":\"Output_input__3VUJf\"};","import cn from 'classnames';\r\nimport { TFormatOperationWithFunc, TOperationsBlock } from '../App/IApp';\r\nimport styles from './Input.module.css';\r\n\r\nconst Button = ({ symbol, func, isInvert }: TFormatOperationWithFunc) => (\r\n    <div\r\n        data-symbol={symbol}\r\n        className={cn(styles.button, { [styles.invert]: isInvert })}\r\n        onClick={(e) => func(e.currentTarget.dataset.symbol)}\r\n    >\r\n        {symbol}\r\n    </div>\r\n);\r\n\r\nconst createBtn = (data: TFormatOperationWithFunc) => <Button key={data.symbol} {...data} />;\r\n\r\nexport type TInput = {\r\n    topLineBlockOpers: TOperationsBlock;\r\n    rightColumnBlockOpers: TOperationsBlock;\r\n    numbersInputsBlockOpers: TOperationsBlock;\r\n};\r\n\r\nconst Input = ({ topLineBlockOpers, rightColumnBlockOpers, numbersInputsBlockOpers }: TInput) => (\r\n    <div className={styles.input}>\r\n        <div className={styles.topLine}>{topLineBlockOpers.map(createBtn)}</div>\r\n        <div className={styles.rightLine}>{rightColumnBlockOpers.map(createBtn)}</div>\r\n        <div className={styles.numbersInputs}>{numbersInputsBlockOpers.map(createBtn)}</div>\r\n    </div>\r\n);\r\n\r\nexport default Input;\r\n","import styles from './Output.module.css';\r\n\r\nexport type TOutput = {\r\n    expression: string;\r\n    inputVal: string;\r\n    error: string;\r\n    onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nconst Output = ({ expression, inputVal, error, onInputChange }: TOutput) => {\r\n    return (\r\n        <div className={styles.output}>\r\n            <div className={styles.expression}>{expression}</div>\r\n            <input className={styles.input} value={inputVal} onChange={onInputChange} />\r\n            <span className={styles.error}>{error}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Output;\r\n","const arrayHelper = {\r\n    changeItemsOnItem<T>(\r\n        array: T[],\r\n        newItemValue: any,\r\n        leftBorderIndex: number,\r\n        rightBorderIndex: number = leftBorderIndex + 2\r\n    ): T[] {\r\n        return [...array.slice(0, leftBorderIndex + 1), newItemValue, ...array.slice(rightBorderIndex)];\r\n    },\r\n};\r\n\r\nexport default arrayHelper;\r\n","const isNumber = (value: any): value is number => typeof value === 'number' && isFinite(value);\r\n\r\nexport default isNumber;\r\n","export interface ICommonOperation {\r\n    readonly symbol: string;\r\n    readonly exSymbols?: Array<string>;\r\n    getSymbol(): string;\r\n    getExSymbols(): Array<string>;\r\n    getMathCorrectSymbol(): string;\r\n    checkIsOperation(symbol: string): boolean;\r\n}\r\n\r\nexport default class CommonOperationClass implements ICommonOperation {\r\n    constructor(readonly symbol: string, readonly exSymbols: Array<string> = []) {\r\n        this.symbol = symbol;\r\n        this.exSymbols = exSymbols;\r\n    }\r\n\r\n    getSymbol(): string {\r\n        return this.symbol;\r\n    }\r\n\r\n    getExSymbols(): Array<string> {\r\n        return this.exSymbols;\r\n    }\r\n\r\n    getMathCorrectSymbol(): string {\r\n        return this.symbol;\r\n    }\r\n\r\n    checkIsOperation(symbol: string): boolean {\r\n        return this.symbol === symbol || this.exSymbols.includes(symbol);\r\n    }\r\n}\r\n","import { TExpression } from '../../calculateResult/calculateResult';\r\nimport { TExprStructure } from '../../calculateResult/parseSymbols';\r\nimport CommonOperationClass, { ICommonOperation } from '../commonOperationClass';\r\nimport { ICalcOperationValidator } from './validators/ICalcOperationValidatorCreator';\r\nexport interface ICalcOperationClass extends ICommonOperation {\r\n    readonly operationName: string;\r\n    readonly symbol: string;\r\n    readonly priority: number;\r\n    readonly validators: ICalcOperationValidator[];\r\n    readonly exSymbols?: Array<string>;\r\n\r\n    readonly canBePlacedAfterOtherOperation: boolean;\r\n    readonly canBePlacedBeforeOtherOperation: boolean;\r\n    readonly hasOwnFullCalculateFunc: boolean;\r\n\r\n    validate(exprStructure: TExprStructure, index: number): void;\r\n\r\n    calculate(params: { [paramName: string]: any }): TExpression;\r\n}\r\n\r\nexport default class CalcOperationClass extends CommonOperationClass implements ICalcOperationClass {\r\n    constructor(\r\n        readonly operationName: string,\r\n        readonly symbol: string,\r\n        readonly priority: number,\r\n        readonly validators: ICalcOperationValidator[],\r\n        readonly exSymbols: Array<string> = []\r\n    ) {\r\n        super(symbol, exSymbols);\r\n        this.operationName = operationName;\r\n        this.priority = priority;\r\n        this.validators = validators;\r\n    }\r\n\r\n    readonly canBePlacedAfterOtherOperation: boolean = false;\r\n    readonly canBePlacedBeforeOtherOperation: boolean = false;\r\n\r\n    readonly hasOwnFullCalculateFunc: boolean = false;\r\n\r\n    validate(exprStructure: TExprStructure, index: number): void {\r\n        this.validators.forEach((validator) => validator.check(this, exprStructure, index));\r\n    }\r\n\r\n    calculate(params: { [paramName: string]: any }): TExpression {\r\n        const defaultExpr = [0];\r\n        return defaultExpr;\r\n    }\r\n}\r\n","import { TCalcOperationValidatorMethod, TCalcOperationValidatorMethodParams } from '../ICalcOperationValidatorCreator';\r\n\r\nconst argumentsNotFound: TCalcOperationValidatorMethod = ({\r\n    operationValidateAPI,\r\n    prevExprElemValidateAPI,\r\n    nextExprElemValidateAPI,\r\n}: TCalcOperationValidatorMethodParams): void => {\r\n    if (\r\n        !(\r\n            (prevExprElemValidateAPI.isExist || nextExprElemValidateAPI.isExist) &&\r\n            (prevExprElemValidateAPI.isNumber ||\r\n                operationValidateAPI.canBePlacedAfterOtherOperation ||\r\n                (nextExprElemValidateAPI.isExist &&\r\n                    nextExprElemValidateAPI.isInstanceofCalcOperation &&\r\n                    nextExprElemValidateAPI.canBePlacedBeforeOtherOperation) ||\r\n                nextExprElemValidateAPI.isNumber ||\r\n                operationValidateAPI.canBePlacedBeforeOtherOperation ||\r\n                (nextExprElemValidateAPI.isExist &&\r\n                    nextExprElemValidateAPI.isInstanceofCalcOperation &&\r\n                    nextExprElemValidateAPI.canBePlacedAfterOtherOperation))\r\n        )\r\n    ) {\r\n        throw new Error(`Arguments for ${operationValidateAPI.operationName} not found`);\r\n    }\r\n};\r\n\r\nexport default argumentsNotFound;\r\n","import CalcOperationClass from './calcOperationClass';\r\n\r\nconst isCalcOperationInstance = (object: any): object is CalcOperationClass => object instanceof CalcOperationClass;\r\n\r\nexport default isCalcOperationInstance;\r\n","import isNumber from '../../../../utils/isNumber';\r\nimport { TExprStructure } from '../../../calculateResult/parseSymbols';\r\nimport { ICalcOperationClass } from '../calcOperationClass';\r\nimport isCalcOperationInstance from '../isInstanceofCalcOperation';\r\nimport {\r\n    ICalcOperationValidator,\r\n    TCalcOperationValidateAPI,\r\n    TLeftNumValidateAPI,\r\n    TNextExprElemValidateAPI,\r\n    TCalcOperationValidatorMethod,\r\n    TPrevExprElemValidateAPI,\r\n    TRightNumValidateAPI,\r\n} from './ICalcOperationValidatorCreator';\r\n\r\nclass CalcOperationValidatorCreator implements ICalcOperationValidator {\r\n    readonly checkMethod: TCalcOperationValidatorMethod;\r\n\r\n    constructor(checkMethod: TCalcOperationValidatorMethod) {\r\n        this.checkMethod = checkMethod;\r\n    }\r\n\r\n    check(operation: ICalcOperationClass, exprStructure: TExprStructure, index: number): void {\r\n        this.checkMethod({\r\n            operationValidateAPI: this.getOperationValidateAPI(operation),\r\n            leftNumValidateAPI: this.getLeftNumValidateAPI(exprStructure, index),\r\n            rightNumValidateAPI: this.getRightNumValidateAPI(exprStructure, index),\r\n            prevExprElemValidateAPI: this.getPrevExprElemValidateAPI(exprStructure, index),\r\n            nextExprElemValidateAPI: this.getNextExprElemValidateAPI(exprStructure, index),\r\n        });\r\n    }\r\n\r\n    getOperationValidateAPI(operation: ICalcOperationClass): TCalcOperationValidateAPI {\r\n        return {\r\n            operationName: operation.operationName,\r\n            canBePlacedAfterOtherOperation: operation.canBePlacedAfterOtherOperation,\r\n            canBePlacedBeforeOtherOperation: operation.canBePlacedBeforeOtherOperation,\r\n        };\r\n    }\r\n\r\n    getLeftNumValidateAPI(exprStructure: TExprStructure, index: number): TLeftNumValidateAPI {\r\n        const leftNumIndex = index - 1;\r\n        const isExist = leftNumIndex >= 0 && isNumber(exprStructure[leftNumIndex]);\r\n\r\n        const result: TLeftNumValidateAPI = { isExist };\r\n\r\n        if (isExist) {\r\n            const leftNum = exprStructure[leftNumIndex];\r\n\r\n            if (isNumber(leftNum)) result.number = leftNum;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getRightNumValidateAPI(exprStructure: TExprStructure, index: number): TRightNumValidateAPI {\r\n        const rightNumIndex = index + 1;\r\n        const isExist = rightNumIndex < exprStructure.length && isNumber(exprStructure[rightNumIndex]);\r\n\r\n        const result: TRightNumValidateAPI = { isExist };\r\n\r\n        if (isExist) {\r\n            const rightNum = exprStructure[rightNumIndex];\r\n\r\n            if (isNumber(rightNum)) result.number = rightNum;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getPrevExprElemValidateAPI(exprStructure: TExprStructure, index: number): TPrevExprElemValidateAPI {\r\n        const prevExprElemIndex = index - 1;\r\n\r\n        const isExist = prevExprElemIndex >= 0;\r\n\r\n        const result: TPrevExprElemValidateAPI = { isExist };\r\n\r\n        if (isExist) {\r\n            const prevExprElem = exprStructure[prevExprElemIndex];\r\n\r\n            const isInstanceofCalcOperationValue = isCalcOperationInstance(prevExprElem);\r\n\r\n            result.isNumber = isNumber(prevExprElem);\r\n            result.isInstanceofCalcOperation = isInstanceofCalcOperationValue;\r\n\r\n            if (isCalcOperationInstance(prevExprElem)) {\r\n                result.canBePlacedBeforeOtherOperation = prevExprElem.canBePlacedBeforeOtherOperation;\r\n                result.canBePlacedAfterOtherOperation = prevExprElem.canBePlacedAfterOtherOperation;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getNextExprElemValidateAPI(exprStructure: TExprStructure, index: number): TNextExprElemValidateAPI {\r\n        const nextExprElemIndex = index + 1;\r\n\r\n        const isExist = nextExprElemIndex < exprStructure.length;\r\n\r\n        const result: TNextExprElemValidateAPI = { isExist };\r\n\r\n        if (isExist) {\r\n            const nextExprElem = exprStructure[nextExprElemIndex];\r\n\r\n            const isInstanceofCalcOperationValue = isCalcOperationInstance(nextExprElem);\r\n\r\n            result.isNumber = isNumber(nextExprElem);\r\n            result.isInstanceofCalcOperation = isInstanceofCalcOperationValue;\r\n\r\n            if (isCalcOperationInstance(nextExprElem)) {\r\n                result.canBePlacedBeforeOtherOperation = nextExprElem.canBePlacedBeforeOtherOperation;\r\n                result.canBePlacedAfterOtherOperation = nextExprElem.canBePlacedAfterOtherOperation;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default CalcOperationValidatorCreator;\r\n","import { TCalcOperationValidatorMethod, TCalcOperationValidatorMethodParams } from '../ICalcOperationValidatorCreator';\r\n\r\nconst stepByStepOperations: TCalcOperationValidatorMethod = ({\r\n    operationValidateAPI,\r\n    prevExprElemValidateAPI,\r\n    nextExprElemValidateAPI,\r\n}: TCalcOperationValidatorMethodParams): void => {\r\n    if (\r\n        (prevExprElemValidateAPI.isExist &&\r\n            prevExprElemValidateAPI.isInstanceofCalcOperation &&\r\n            !prevExprElemValidateAPI.canBePlacedBeforeOtherOperation &&\r\n            !operationValidateAPI.canBePlacedAfterOtherOperation) ||\r\n        (nextExprElemValidateAPI.isExist &&\r\n            nextExprElemValidateAPI.isInstanceofCalcOperation &&\r\n            !nextExprElemValidateAPI.canBePlacedAfterOtherOperation &&\r\n            !operationValidateAPI.canBePlacedBeforeOtherOperation)\r\n    ) {\r\n        throw new Error(`The ${operationValidateAPI.operationName} cannot be performed before other operation`);\r\n    }\r\n};\r\n\r\nexport default stepByStepOperations;\r\n","import { TCalcOperationValidatorMethod, TCalcOperationValidatorMethodParams } from '../ICalcOperationValidatorCreator';\r\n\r\nconst divideByZero: TCalcOperationValidatorMethod = ({\r\n    rightNumValidateAPI,\r\n}: TCalcOperationValidatorMethodParams): void => {\r\n    if (rightNumValidateAPI.number === 0) throw new Error('You cannot divide by zero');\r\n};\r\n\r\nexport default divideByZero;\r\n","import { TCalcOperationValidatorMethod, TCalcOperationValidatorMethodParams } from '../ICalcOperationValidatorCreator';\r\n\r\nconst numOnRightMustNotBe: TCalcOperationValidatorMethod = ({\r\n    operationValidateAPI,\r\n    rightNumValidateAPI,\r\n}: TCalcOperationValidatorMethodParams): void => {\r\n    if (rightNumValidateAPI.isExist)\r\n        throw new Error(`The ${operationValidateAPI.operationName} operation mustn't has a number on the right`);\r\n};\r\n\r\nexport default numOnRightMustNotBe;\r\n","import { TCalcOperationValidatorMethod, TCalcOperationValidatorMethodParams } from '../ICalcOperationValidatorCreator';\r\n\r\nconst exprOnLeftMustNotBeNum: TCalcOperationValidatorMethod = ({\r\n    operationValidateAPI,\r\n    leftNumValidateAPI,\r\n}: TCalcOperationValidatorMethodParams): void => {\r\n    if (leftNumValidateAPI.isExist)\r\n        throw new Error(`The ${operationValidateAPI.operationName} operation mustn't has any number on the left`);\r\n};\r\n\r\nexport default exprOnLeftMustNotBeNum;\r\n","import { TCalcOperationValidatorMethod, TCalcOperationValidatorMethodParams } from '../ICalcOperationValidatorCreator';\r\n\r\nconst numOnRightMustBe: TCalcOperationValidatorMethod = ({\r\n    operationValidateAPI,\r\n    rightNumValidateAPI,\r\n}: TCalcOperationValidatorMethodParams): void => {\r\n    if (!rightNumValidateAPI.isExist)\r\n        throw new Error(`The ${operationValidateAPI.operationName} operation need an argument on the right`);\r\n};\r\n\r\nexport default numOnRightMustBe;\r\n","import { ICalcOperationClass } from './calcOperationClass';\r\nimport addition from './operations/addition';\r\nimport division from './operations/division';\r\nimport multiplication from './operations/multiplication';\r\nimport percent from './operations/percent';\r\nimport squareRoot from './operations/squareRoot';\r\nimport subtraction from './operations/subtraction';\r\n\r\nexport interface ICalcOperations {\r\n    [calcOperationName: string]: ICalcOperationClass;\r\n}\r\n\r\nconst calcOperations = {\r\n    addition,\r\n    division,\r\n    multiplication,\r\n    percent,\r\n    squareRoot,\r\n    subtraction,\r\n};\r\n\r\nexport default calcOperations;\r\n","import { TExpression } from '../../../calculateResult/calculateResult';\r\nimport CalcOperationClass from '../calcOperationClass';\r\nimport argumentsNotFound from '../validators/checkers/argumentsNotFound';\r\nimport CalcOperationValidatorCreator from '../validators/CalcOperationValidatorCreator';\r\nimport stepByStepOperations from '../validators/checkers/stepByStepOperations';\r\n\r\nclass Addition extends CalcOperationClass {\r\n    calculate(params: { leftArg: number | null; rightArg: number | null }): TExpression {\r\n        const leftNumber = params.leftArg !== null ? params.leftArg : 0;\r\n        const rightNumber = params.rightArg !== null ? params.rightArg : 0;\r\n\r\n        return [leftNumber + rightNumber];\r\n    }\r\n}\r\n\r\nconst validators = [\r\n    new CalcOperationValidatorCreator(argumentsNotFound),\r\n    new CalcOperationValidatorCreator(stepByStepOperations),\r\n];\r\n\r\nconst addition = new Addition('addition', '+', 0, validators);\r\n\r\nexport default addition;\r\n","import { TExpression } from '../../../calculateResult/calculateResult';\r\nimport CalcOperationClass from '../calcOperationClass';\r\nimport argumentsNotFound from '../validators/checkers/argumentsNotFound';\r\nimport divideByZero from '../validators/checkers/divideByZero';\r\nimport CalcOperationValidatorCreator from '../validators/CalcOperationValidatorCreator';\r\nimport stepByStepOperations from '../validators/checkers/stepByStepOperations';\r\n\r\nclass Division extends CalcOperationClass {\r\n    calculate(params: { leftArg: number | null; rightArg: number | null }): TExpression {\r\n        const leftNumber = params.leftArg !== null ? params.leftArg : 1;\r\n        const rightNumber = params.rightArg !== null ? params.rightArg : 1;\r\n\r\n        return [leftNumber / rightNumber];\r\n    }\r\n}\r\n\r\nconst validators = [\r\n    new CalcOperationValidatorCreator(argumentsNotFound),\r\n    new CalcOperationValidatorCreator(stepByStepOperations),\r\n    new CalcOperationValidatorCreator(divideByZero),\r\n];\r\n\r\nconst division = new Division('division', '/', 1, validators);\r\n\r\nexport default division;\r\n","import { TExpression } from '../../../calculateResult/calculateResult';\r\nimport CalcOperationClass from '../calcOperationClass';\r\nimport argumentsNotFound from '../validators/checkers/argumentsNotFound';\r\nimport CalcOperationValidatorCreator from '../validators/CalcOperationValidatorCreator';\r\nimport stepByStepOperations from '../validators/checkers/stepByStepOperations';\r\n\r\nclass Multiplication extends CalcOperationClass {\r\n    calculate(params: { leftArg: number | null; rightArg: number | null }): TExpression {\r\n        const leftNumber = params.leftArg !== null ? params.leftArg : 1;\r\n        const rightNumber = params.rightArg !== null ? params.rightArg : 1;\r\n\r\n        return [leftNumber * rightNumber];\r\n    }\r\n}\r\n\r\nconst validators = [\r\n    new CalcOperationValidatorCreator(argumentsNotFound),\r\n    new CalcOperationValidatorCreator(stepByStepOperations),\r\n];\r\n\r\nconst multiplication = new Multiplication('multiplication', '×', 1, validators, ['*']);\r\n\r\nexport default multiplication;\r\n","import arrayHelper from '../../../../utils/arrayHelper';\r\nimport isNumber from '../../../../utils/isNumber';\r\nimport { ICalculateExpr, TExpression } from '../../../calculateResult/calculateResult';\r\nimport CalcOperationClass from '../calcOperationClass';\r\nimport argumentsNotFound from '../validators/checkers/argumentsNotFound';\r\nimport numOnRightMustNotBe from '../validators/checkers/numOnRightMustNotBe';\r\nimport CalcOperationValidatorCreator from '../validators/CalcOperationValidatorCreator';\r\n\r\nclass Percent extends CalcOperationClass {\r\n    readonly canBePlacedBeforeOtherOperation: boolean = true;\r\n    readonly hasOwnFullCalculateFunc: boolean = true;\r\n\r\n    calculate(params: {\r\n        expr: TExpression;\r\n        calculateExpr: (params: ICalculateExpr) => number;\r\n        operationIndex: number;\r\n    }): TExpression {\r\n        const { expr, calculateExpr, operationIndex } = params;\r\n\r\n        // checking operation before (on the left) this operation\r\n        // (there is should be only one operation with priority = 0 or no one at all)\r\n        if (!(1 <= operationIndex && operationIndex <= 3)) {\r\n            // if false we need to calc part of expression on the left\r\n            const exprLastIndexToCalc = operationIndex - 2;\r\n            const newLeftPart = calculateExpr({ expr: expr.slice(0, exprLastIndexToCalc), index: 0 });\r\n\r\n            const newExprStructure = [newLeftPart, ...expr.slice(exprLastIndexToCalc)];\r\n            const newOperationIndex = 3;\r\n\r\n            return this.calculate({ expr: newExprStructure, calculateExpr, operationIndex: newOperationIndex });\r\n        }\r\n\r\n        const mainNumIndex = operationIndex - 3;\r\n        const isExistMainNum = mainNumIndex >= 0;\r\n        const mainNum = isExistMainNum ? expr[mainNumIndex] : 1;\r\n\r\n        const secondaryNumIndex = operationIndex - 1;\r\n        const secondaryNum = expr[secondaryNumIndex];\r\n\r\n        if (isNumber(mainNum) && isNumber(secondaryNum)) {\r\n            const result: number = (mainNum / 100) * secondaryNum;\r\n\r\n            const newExprStructure = arrayHelper.changeItemsOnItem(\r\n                expr,\r\n                result,\r\n                secondaryNumIndex - 1,\r\n                operationIndex + 1\r\n            );\r\n\r\n            return newExprStructure;\r\n        }\r\n\r\n        throw new Error('Some of percent operation arguments is not a number');\r\n    }\r\n}\r\n\r\nconst validators = [\r\n    new CalcOperationValidatorCreator(argumentsNotFound),\r\n    new CalcOperationValidatorCreator(numOnRightMustNotBe),\r\n];\r\n\r\nconst percent = new Percent('percent', '%', 2, validators);\r\n\r\nexport default percent;\r\n","import { TExpression } from '../../../calculateResult/calculateResult';\r\nimport CalcOperationClass from '../calcOperationClass';\r\nimport argumentsNotFound from '../validators/checkers/argumentsNotFound';\r\nimport exprOnLeftMustNotBeNum from '../validators/checkers/exprOnLeftMustNotBeNum';\r\nimport numOnRightMustBe from '../validators/checkers/numOnRightMustBe';\r\nimport CalcOperationValidatorCreator from '../validators/CalcOperationValidatorCreator';\r\n\r\nclass SquareRoot extends CalcOperationClass {\r\n    readonly canBePlacedAfterOtherOperation: boolean = true;\r\n    readonly canBePlacedBeforeOtherOperation: boolean = true;\r\n\r\n    calculate(params: { leftArg: number | null; rightArg: number | null }): TExpression {\r\n        const leftNumber = params.leftArg !== null ? params.leftArg : 1;\r\n        const rightNumber = params.rightArg !== null ? params.rightArg : 1;\r\n\r\n        return [leftNumber * Math.pow(rightNumber, 0.5)];\r\n    }\r\n}\r\n\r\nconst validators = [\r\n    new CalcOperationValidatorCreator(argumentsNotFound),\r\n    new CalcOperationValidatorCreator(numOnRightMustBe),\r\n    new CalcOperationValidatorCreator(exprOnLeftMustNotBeNum),\r\n];\r\n\r\nconst squareRoot = new SquareRoot('square root', '√', 2, validators);\r\n\r\nexport default squareRoot;\r\n","import { TExpression } from '../../../calculateResult/calculateResult';\r\nimport CalcOperationClass from '../calcOperationClass';\r\nimport argumentsNotFound from '../validators/checkers/argumentsNotFound';\r\nimport CalcOperationValidatorCreator from '../validators/CalcOperationValidatorCreator';\r\nimport stepByStepOperations from '../validators/checkers/stepByStepOperations';\r\n\r\nclass Subtraction extends CalcOperationClass {\r\n    calculate(params: { leftArg: number | null; rightArg: number | null }): TExpression {\r\n        const leftNumber = params.leftArg !== null ? params.leftArg : 0;\r\n        const rightNumber = params.rightArg !== null ? params.rightArg : 0;\r\n\r\n        return [leftNumber - rightNumber];\r\n    }\r\n}\r\n\r\nconst validators = [\r\n    new CalcOperationValidatorCreator(argumentsNotFound),\r\n    new CalcOperationValidatorCreator(stepByStepOperations),\r\n];\r\n\r\nconst subtraction = new Subtraction('subtraction', '-', 0, validators);\r\n\r\nexport default subtraction;\r\n","import CalcOperationClass from './calcOperationClass';\r\nimport calcOperations from './calcOperations';\r\n\r\nconst findOperationBySymbol = (symbol: string): CalcOperationClass | undefined =>\r\n    Object.values(calcOperations).find((operation) => operation.checkIsOperation(symbol));\r\n\r\nexport default findOperationBySymbol;\r\n","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst eight = new CommonOperationClass('8');\r\n\r\nexport default eight;\r\n","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst five = new CommonOperationClass('5');\r\n\r\nexport default five;\r\n","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst four = new CommonOperationClass('4');\r\n\r\nexport default four;\r\n","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst nine = new CommonOperationClass('9');\r\n\r\nexport default nine;\r\n","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst one = new CommonOperationClass('1');\r\n\r\nexport default one;\r\n","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst seven = new CommonOperationClass('7');\r\n\r\nexport default seven;\r\n","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst six = new CommonOperationClass('6');\r\n\r\nexport default six;\r\n","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst three = new CommonOperationClass('3');\r\n\r\nexport default three;\r\n","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst two = new CommonOperationClass('2');\r\n\r\nexport default two;\r\n","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst zero = new CommonOperationClass('0');\r\n\r\nexport default zero;\r\n","import { ICommonOperation } from '../commonOperationClass';\r\nimport eight from './numbers/default/eight';\r\nimport five from './numbers/default/five';\r\nimport four from './numbers/default/four';\r\nimport nine from './numbers/default/nine';\r\nimport one from './numbers/default/one';\r\nimport seven from './numbers/default/seven';\r\nimport six from './numbers/default/six';\r\nimport three from './numbers/default/three';\r\nimport two from './numbers/default/two';\r\nimport zero from './numbers/default/zero';\r\nimport doubleZero from './numbers/doubleZero';\r\nimport comma from './otherInputs/comma';\r\n\r\nexport interface INumbersInputs {\r\n    [numberInputName: string]: ICommonOperation;\r\n}\r\n\r\nconst numbersInputs: INumbersInputs = {\r\n    zero,\r\n    one,\r\n    two,\r\n    three,\r\n    four,\r\n    five,\r\n    six,\r\n    seven,\r\n    eight,\r\n    nine,\r\n    doubleZero,\r\n    comma,\r\n};\r\n\r\nexport default numbersInputs;\r\n","import CommonOperationClass from '../../commonOperationClass';\r\nimport zero from './default/zero';\r\n\r\nclass DoubleZero extends CommonOperationClass {\r\n    constructor(readonly symbols: CommonOperationClass[], readonly exSymbols: Array<string> = []) {\r\n        super(\r\n            symbols.reduce((acc, operation) => `${acc}${operation.getSymbol()}`, ''), // create superSymbol from symbols\r\n            exSymbols\r\n        );\r\n    }\r\n}\r\n\r\nconst doubleZero = new DoubleZero([zero, zero]);\r\n\r\nexport default doubleZero;\r\n","import CommonOperationClass from '../../commonOperationClass';\r\n\r\nclass Comma extends CommonOperationClass {\r\n    getMathCorrectSymbol(): string {\r\n        return this.exSymbols[0];\r\n    }\r\n}\r\n\r\nconst comma = new Comma(',', ['.']);\r\n\r\nexport default comma;\r\n","import { ICommonOperation } from '../commonOperationClass';\r\nimport numbersInputs from './numbersInputs';\r\n\r\nconst findNumberInputBySymbol = (symbol: string): ICommonOperation | undefined =>\r\n    Object.values(numbersInputs).find((numberInput) => numberInput.checkIsOperation(symbol));\r\n\r\nexport default findNumberInputBySymbol;\r\n","import CommonOperationClass, { ICommonOperation } from '../commonOperationClass';\r\n\r\nexport interface IParenthesis extends ICommonOperation {\r\n    readonly symbol: string;\r\n    readonly type: string;\r\n    getType(): string;\r\n}\r\n\r\nclass ParenthesisClass extends CommonOperationClass implements IParenthesis {\r\n    constructor(readonly symbol: string, readonly type: string) {\r\n        super(symbol);\r\n        this.type = type;\r\n    }\r\n\r\n    getType(): string {\r\n        return this.type;\r\n    }\r\n}\r\n\r\nexport default ParenthesisClass;\r\n","import ParenthesisClass from '../parenthesisClass';\r\n\r\nconst closeParenthesis = new ParenthesisClass(')', 'close');\r\n\r\nexport default closeParenthesis;\r\n","import closeParenthesis from './operations/closeParenthesis';\r\nimport openParenthesis from './operations/openParenthesis';\r\nimport { IParenthesis } from './parenthesisClass';\r\n\r\nexport interface IParentheses {\r\n    [parenthesisName: string]: IParenthesis;\r\n}\r\n\r\nconst parentheses: IParentheses = { openParenthesis, closeParenthesis };\r\n\r\nexport default parentheses;\r\n","import ParenthesisClass from '../parenthesisClass';\r\n\r\nconst openParenthesis = new ParenthesisClass('(', 'open');\r\n\r\nexport default openParenthesis;\r\n","import parentheses from './parentheses';\r\nimport { IParenthesis } from './parenthesisClass';\r\n\r\nconst findParenthesis = (symbol: string): IParenthesis | undefined =>\r\n    Object.values(parentheses).find((parenthesis) => parenthesis.checkIsOperation(symbol));\r\n\r\nexport default findParenthesis;\r\n","import arrayHelper from '../../utils/arrayHelper';\r\nimport isNumber from '../../utils/isNumber';\r\nimport CalcOperationClass from '../operations/calculateOperations/calcOperationClass';\r\nimport findOperationBySymbol from '../operations/calculateOperations/findOperationBySymbol';\r\nimport isCalcOperationInstance from '../operations/calculateOperations/isInstanceofCalcOperation';\r\nimport findNumberInputBySymbol from '../operations/numbersInputs/findNumberInputBySymbol';\r\nimport findParenthesis from '../operations/parentheses/findParenthesis';\r\n\r\nexport type TExprStructure = Array<number | CalcOperationClass | TExprStructure>;\r\n\r\nexport const isExprStructureInstance = (exprStructureInstance: any): exprStructureInstance is TExprStructure => {\r\n    if (Array.isArray(exprStructureInstance)) {\r\n        return exprStructureInstance.reduce(\r\n            (acc, element) =>\r\n                isNumber(element) ||\r\n                isCalcOperationInstance(element) ||\r\n                isExprStructureInstance(element) ||\r\n                element.length === 0\r\n                    ? true\r\n                    : acc,\r\n            false\r\n        );\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nconst checkParenthesisPairFinder = (count: number, checkType?: string): void => {\r\n    const errorMessage = 'Some parenthesis pair not found';\r\n\r\n    switch (checkType) {\r\n        case 'result': {\r\n            if (count !== 0) throw new Error(errorMessage);\r\n            break;\r\n        }\r\n        case 'onClose': {\r\n            if (!(count > 0)) throw new Error(errorMessage);\r\n            break;\r\n        }\r\n        default: {\r\n            if (count < 0) throw new Error(errorMessage);\r\n        }\r\n    }\r\n};\r\n\r\nfunction hasStringExprStructure(exprStructure: TExprStructureWithString): exprStructure is TExprStructureWithString {\r\n    return !!exprStructure.find((exprChild) => {\r\n        if (exprChild instanceof Array) return hasStringExprStructure(exprChild);\r\n\r\n        return typeof exprChild === 'string';\r\n    });\r\n}\r\n\r\ntype TExprStructureWithString = Array<number | CalcOperationClass | TExprStructure | string>;\r\n\r\ninterface IParse {\r\n    symbols: Array<string>;\r\n    index: number;\r\n    parenthesisPairFinder: number;\r\n    exprStructure: TExprStructureWithString;\r\n}\r\n\r\nconst parse = (\r\n    symbols: Array<string>,\r\n    index: number = 0,\r\n    parenthesisPairFinder: number = 0,\r\n    exprStructure: TExprStructureWithString = []\r\n): TExprStructure | IParse => {\r\n    const symbol = symbols[index];\r\n\r\n    if (!symbol) {\r\n        if (index === 0) throw new Error('First write the expression');\r\n\r\n        checkParenthesisPairFinder(parenthesisPairFinder, 'result');\r\n\r\n        if (hasStringExprStructure(exprStructure))\r\n            throw new Error('Programming error: expression structure contain \"string\" in \"parseSymbols\" function');\r\n\r\n        return exprStructure;\r\n    }\r\n\r\n    // parse parentheses\r\n    checkParenthesisPairFinder(parenthesisPairFinder);\r\n    const parenthesis = findParenthesis(symbol);\r\n    if (parenthesis) {\r\n        if (parenthesis.getType() === 'open') {\r\n            const parseResult = parse(symbols, index + 1, parenthesisPairFinder + 1);\r\n\r\n            if (isExprStructureInstance(parseResult)) return parseResult;\r\n\r\n            const {\r\n                index: closeParenthesisIndex,\r\n                parenthesisPairFinder: newParenthesisPairFinder,\r\n                exprStructure: thisParenthesesExprStructure,\r\n            } = parseResult;\r\n\r\n            const newExprStructure = arrayHelper.changeItemsOnItem(\r\n                exprStructure,\r\n                thisParenthesesExprStructure,\r\n                index - 1\r\n            );\r\n\r\n            return parse(symbols, closeParenthesisIndex + 1, newParenthesisPairFinder, newExprStructure);\r\n        }\r\n        if (parenthesis.getType() === 'close') {\r\n            checkParenthesisPairFinder(parenthesisPairFinder, 'onClose');\r\n            return {\r\n                symbols,\r\n                index,\r\n                parenthesisPairFinder: parenthesisPairFinder - 1,\r\n                exprStructure: exprStructure,\r\n            };\r\n        }\r\n    }\r\n\r\n    // parse numbers inputs\r\n    const numberInput = findNumberInputBySymbol(symbol);\r\n    if (numberInput) {\r\n        const correctSymbol = numberInput.getMathCorrectSymbol();\r\n\r\n        const lastIndex = exprStructure.length - 1;\r\n        const isExistLastElement = exprStructure.length > 0;\r\n        const lastElement = exprStructure[lastIndex];\r\n        const nextSymbolIndex = index + 1;\r\n        const isNextSymbolNumber = !!findNumberInputBySymbol(symbols[nextSymbolIndex]);\r\n\r\n        if (isExistLastElement && isNumber(Number.parseFloat(lastElement.toString()))) {\r\n            const newLastElement = lastElement + correctSymbol;\r\n            const exprStructureWithOutLastElem = exprStructure.slice(0, lastIndex);\r\n\r\n            if (!isNextSymbolNumber)\r\n                return parse(symbols, index + 1, parenthesisPairFinder, [\r\n                    ...exprStructureWithOutLastElem,\r\n                    Number.parseFloat(newLastElement),\r\n                ]);\r\n\r\n            return parse(symbols, index + 1, parenthesisPairFinder, [...exprStructureWithOutLastElem, newLastElement]);\r\n        }\r\n\r\n        if (!isNextSymbolNumber)\r\n            return parse(symbols, index + 1, parenthesisPairFinder, [\r\n                ...exprStructure,\r\n                Number.parseFloat(correctSymbol),\r\n            ]);\r\n\r\n        return parse(symbols, index + 1, parenthesisPairFinder, [...exprStructure, correctSymbol]);\r\n    }\r\n\r\n    // parse calc operations\r\n    const operation = findOperationBySymbol(symbol);\r\n    if (operation) return parse(symbols, index + 1, parenthesisPairFinder, [...exprStructure, operation]);\r\n\r\n    throw new Error(`Unknown symbol: \" ${symbol} \"`);\r\n};\r\n\r\nconst validateCalcOperations = (exprStructure: TExprStructure, index: number = 0): void => {\r\n    if (index === exprStructure.length) return;\r\n\r\n    const element = exprStructure[index];\r\n\r\n    if (isExprStructureInstance(element)) {\r\n        validateCalcOperations(element);\r\n        return;\r\n    }\r\n\r\n    if (isCalcOperationInstance(element)) element.validate(exprStructure, index);\r\n\r\n    validateCalcOperations(exprStructure, index + 1);\r\n};\r\n\r\nconst parseSymbols = (symbols: string): TExprStructure => {\r\n    const exprStructure = parse(symbols.split(''));\r\n\r\n    if (!isExprStructureInstance(exprStructure))\r\n        throw new Error(\r\n            'Programming error: expected an expression structure but received parse function \"parseSymbols\" function'\r\n        );\r\n\r\n    validateCalcOperations(exprStructure);\r\n\r\n    return exprStructure;\r\n};\r\n\r\nexport default parseSymbols;\r\n","import arrayHelper from '../../utils/arrayHelper';\r\nimport isNumber from '../../utils/isNumber';\r\nimport CalcOperationClass from '../operations/calculateOperations/calcOperationClass';\r\nimport parseSymbols, { isExprStructureInstance, TExprStructure } from './parseSymbols';\r\n\r\nexport type TExpression = Array<number | CalcOperationClass>;\r\n\r\nexport interface ICalculateExpr {\r\n    expr: TExpression;\r\n    index?: number;\r\n    maxPriority?: number;\r\n    maxPriorityOperationIndex?: number | null;\r\n}\r\n\r\nconst calculateExprDefValues: ICalculateExpr = {\r\n    expr: [],\r\n    index: 0,\r\n    maxPriority: -1,\r\n    maxPriorityOperationIndex: null,\r\n};\r\n\r\nconst calculateExpr = (params: ICalculateExpr): number => {\r\n    const { expr, index, maxPriority, maxPriorityOperationIndex } = { ...calculateExprDefValues, ...params };\r\n\r\n    if (\r\n        typeof index === 'undefined' ||\r\n        typeof maxPriority === 'undefined' ||\r\n        typeof maxPriorityOperationIndex === 'undefined'\r\n    ) {\r\n        throw new Error('Programming error: default values didn\\'t set in \"calculateExpr\" function');\r\n    }\r\n\r\n    if (expr.length === 0) {\r\n        return 0;\r\n    }\r\n\r\n    if (expr.length === 1) {\r\n        if (expr[0] instanceof CalcOperationClass) {\r\n            throw new Error('Programming error: expected a number but got an operation in \"calculateExpr\" function');\r\n        }\r\n\r\n        return expr[0];\r\n    }\r\n\r\n    if (index === expr.length && isNumber(maxPriorityOperationIndex)) {\r\n        const operation = expr[maxPriorityOperationIndex];\r\n\r\n        if (!(operation instanceof CalcOperationClass))\r\n            throw new Error('Programming error: the number took for the operation in \"calculateExpr\" function');\r\n\r\n        if (operation.hasOwnFullCalculateFunc) {\r\n            const newExprStructure = operation.calculate({\r\n                expr,\r\n                calculateExpr,\r\n                operationIndex: maxPriorityOperationIndex,\r\n            });\r\n            return calculateExpr({ expr: newExprStructure, index: 0 });\r\n        }\r\n\r\n        const leftNumIndex = maxPriorityOperationIndex - 1;\r\n        const isExistLeftNum = leftNumIndex >= 0 && isNumber(expr[leftNumIndex]);\r\n        const leftArg = isExistLeftNum ? expr[leftNumIndex] : null;\r\n\r\n        const rightNumIndex = maxPriorityOperationIndex + 1;\r\n        const isExistRightNum = rightNumIndex < index && isNumber(expr[rightNumIndex]);\r\n        const rightArg = isExistRightNum ? expr[rightNumIndex] : null;\r\n\r\n        const [result] = operation.calculate({ leftArg, rightArg });\r\n\r\n        const leftBorderIndex = isExistLeftNum ? leftNumIndex - 1 : leftNumIndex;\r\n        const rightBorderIndex = isExistRightNum ? rightNumIndex + 1 : rightNumIndex;\r\n        const newExprStructure = arrayHelper.changeItemsOnItem(expr, result, leftBorderIndex, rightBorderIndex);\r\n\r\n        return calculateExpr({ expr: newExprStructure, index: 0 });\r\n    }\r\n\r\n    const exprChild = expr[index];\r\n\r\n    if (isNumber(exprChild)) return calculateExpr({ expr, index: index + 1, maxPriority, maxPriorityOperationIndex });\r\n\r\n    // else exprChild is operation\r\n    const currentPriority = exprChild.priority;\r\n    if (currentPriority > maxPriority)\r\n        return calculateExpr({\r\n            expr,\r\n            index: index + 1,\r\n            maxPriority: currentPriority,\r\n            maxPriorityOperationIndex: index,\r\n        });\r\n\r\n    return calculateExpr({ expr, index: index + 1, maxPriority, maxPriorityOperationIndex });\r\n};\r\n\r\nconst makeCalculations = (exprStructure: TExprStructure): number => {\r\n    if (isNumber(exprStructure)) return exprStructure;\r\n\r\n    const exprStructureWithOutParentheses: TExpression = exprStructure.map(\r\n        (exprChild: number | CalcOperationClass | TExprStructure): number | CalcOperationClass =>\r\n            isExprStructureInstance(exprChild) ? makeCalculations(exprChild) : exprChild\r\n    );\r\n\r\n    return calculateExpr({ expr: exprStructureWithOutParentheses });\r\n};\r\n\r\nconst calculateResult = (expression: string): string => {\r\n    try {\r\n        const exprStructure = parseSymbols(expression);\r\n\r\n        const result: number = makeCalculations(exprStructure);\r\n\r\n        const formattedResult = result\r\n            .toString()\r\n            .split('')\r\n            .map((number) => (number === '.' ? ',' : number))\r\n            .reduce((acc, number) => `${acc}${number}`);\r\n\r\n        return formattedResult;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport default calculateResult;\r\n","import CommonOperationClass from '../../commonOperationClass';\r\n\r\nconst calculate = new CommonOperationClass('=');\r\n\r\nexport default calculate;\r\n","import CommonOperationClass from '../../commonOperationClass';\r\n\r\nconst clean = new CommonOperationClass('C');\r\n\r\nexport default clean;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport calculateResult from '../../calculatorFunctional/calculateResult/calculateResult';\r\nimport calcOperations, {\r\n    ICalcOperations,\r\n} from '../../calculatorFunctional/operations/calculateOperations/calcOperations';\r\nimport defaultOperations, {\r\n    IDefaultOperations,\r\n} from '../../calculatorFunctional/operations/defaultOperations/defaultOperations';\r\nimport numbersInputs, { INumbersInputs } from '../../calculatorFunctional/operations/numbersInputs/numbersInputs';\r\nimport parenthesesOperations, { IParentheses } from '../../calculatorFunctional/operations/parentheses/parentheses';\r\n\r\ninterface ICalcReducerState {\r\n    input: string;\r\n    expression: string | null;\r\n    numbersInputs: INumbersInputs;\r\n    defaultOperations: IDefaultOperations;\r\n    parenthesesOperations: IParentheses;\r\n    calcOperations: ICalcOperations;\r\n    error: string | null;\r\n}\r\n\r\nconst initialState: ICalcReducerState = {\r\n    input: '',\r\n    expression: null,\r\n    numbersInputs,\r\n    defaultOperations,\r\n    parenthesesOperations,\r\n    calcOperations,\r\n    error: null,\r\n};\r\n\r\nexport type TCalcReducerPayloadAction = PayloadAction<{ [paramName: string]: string } | undefined>;\r\n\r\nexport const calcSlice = createSlice({\r\n    name: 'calc',\r\n    initialState,\r\n    reducers: {\r\n        setInputAction: (state, action: TCalcReducerPayloadAction) => ({ ...state, ...action.payload }),\r\n        addSymbolAction: (state, action: TCalcReducerPayloadAction) => ({\r\n            ...state,\r\n            input: `${state.input}${action.payload ? action.payload.symbol : ''}`,\r\n        }),\r\n        calculateAction: (state) => {\r\n            try {\r\n                const expression = state.input;\r\n                const result = calculateResult(expression);\r\n                return { ...state, input: result, expression, error: null };\r\n            } catch (error) {\r\n                return { ...state, error: error.message };\r\n            }\r\n        },\r\n        cleanAction: (state) => ({ ...state, input: '', expression: null, error: null }),\r\n        deleteLastSymbolAction: (state) => ({ ...state, input: state.input.slice(0, state.input.length - 1) }),\r\n    },\r\n});\r\n\r\nconst { setInputAction, addSymbolAction, calculateAction, cleanAction, deleteLastSymbolAction } = calcSlice.actions;\r\n\r\nexport const setInput = (input: string): TCalcReducerPayloadAction => setInputAction({ input });\r\nexport const addSymbol = (symbol: string): TCalcReducerPayloadAction => addSymbolAction({ symbol });\r\nexport const calculate = (): TCalcReducerPayloadAction => calculateAction();\r\nexport const clean = (): TCalcReducerPayloadAction => cleanAction();\r\nexport const deleteLastSymbol = (): TCalcReducerPayloadAction => deleteLastSymbolAction();\r\n\r\nexport default calcSlice.reducer;\r\n","import { ICommonOperation } from '../commonOperationClass';\r\nimport calculate from './operations/calculate';\r\nimport clean from './operations/clean';\r\n\r\nexport interface IDefaultOperations {\r\n    [defaultOperationName: string]: ICommonOperation;\r\n}\r\n\r\nconst defaultOperations: IDefaultOperations = { clean, calculate };\r\n\r\nexport default defaultOperations;\r\n","import { RootStateOrAny } from 'react-redux';\r\nimport { createSelector } from 'reselect';\r\nimport { ICalcOperations } from '../../calculatorFunctional/operations/calculateOperations/calcOperations';\r\nimport { ICommonOperation } from '../../calculatorFunctional/operations/commonOperationClass';\r\nimport { IDefaultOperations } from '../../calculatorFunctional/operations/defaultOperations/defaultOperations';\r\nimport { INumbersInputs } from '../../calculatorFunctional/operations/numbersInputs/numbersInputs';\r\nimport { IParentheses } from '../../calculatorFunctional/operations/parentheses/parentheses';\r\n\r\nexport const getInput = (state: RootStateOrAny): string => state.calc.input;\r\nexport const getExpression = (state: RootStateOrAny): string => state.calc.expression;\r\nexport const getError = (state: RootStateOrAny): string => state.calc.error;\r\n\r\nexport type TFormatOperation = {\r\n    symbol: string;\r\n    exSymbols: Array<string>;\r\n    funcName: string;\r\n    isInvert: boolean;\r\n};\r\n\r\nexport interface IFormatOperations {\r\n    [operationName: string]: TFormatOperation;\r\n}\r\n\r\nconst formatOperations = (\r\n    operations: {\r\n        [operationName: string]: ICommonOperation;\r\n    },\r\n    customOperations: {\r\n        [operationName: string]: {\r\n            funcName: string;\r\n            isInvert?: boolean;\r\n        };\r\n    } = {}\r\n): IFormatOperations =>\r\n    Object.entries(operations).reduce(\r\n        (acc, [name, operation]) => ({\r\n            ...acc,\r\n            [name]: {\r\n                symbol: operation.getSymbol(),\r\n                exSymbols: operation.getExSymbols(),\r\n                funcName: customOperations[name] ? customOperations[name].funcName : 'addSymbol',\r\n                isInvert: customOperations[name] ? customOperations[name].isInvert : false,\r\n            },\r\n        }),\r\n        {}\r\n    );\r\n\r\nconst getNumbersInputsPrimitive = (state: RootStateOrAny): INumbersInputs => state.calc.numbersInputs;\r\nexport const getNumbersInputs = createSelector(getNumbersInputsPrimitive, (numberInputs: INumbersInputs) =>\r\n    formatOperations(numberInputs)\r\n);\r\n\r\nconst getParenthesesOperationsPrimitive = (state: RootStateOrAny): IParentheses => state.calc.parenthesesOperations;\r\nexport const getParenthesesOperations = createSelector(getParenthesesOperationsPrimitive, (parenthesesOperations) =>\r\n    formatOperations(parenthesesOperations)\r\n);\r\n\r\nconst getDefaultOperationsPrimitive = (state: RootStateOrAny): IDefaultOperations => state.calc.defaultOperations;\r\nexport const getDefaultOperations = createSelector(getDefaultOperationsPrimitive, (operations) =>\r\n    formatOperations(operations, {\r\n        clean: {\r\n            funcName: 'clean',\r\n        },\r\n        calculate: {\r\n            funcName: 'calculate',\r\n            isInvert: true,\r\n        },\r\n    })\r\n);\r\n\r\nconst getCalcOperationsPrimitive = (state: RootStateOrAny): ICalcOperations => state.calc.calcOperations;\r\nexport const getCalcOperations = createSelector(getCalcOperationsPrimitive, (operations) =>\r\n    formatOperations(operations)\r\n);\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport calcReducer from './calc/calcReducer';\r\n\r\nconst reducer = combineReducers({\r\n    calc: calcReducer,\r\n});\r\n\r\nconst store = configureStore({ reducer });\r\n\r\nexport default store;\r\n","import React, { createRef, useEffect } from 'react';\r\nimport { connect, Provider, RootStateOrAny } from 'react-redux';\r\nimport './App.module.css';\r\nimport styles from './App.module.css';\r\nimport Input from '../../components/inputPart/Input';\r\nimport Output, { TOutput } from '../../components/outputPart/Output';\r\nimport {\r\n    AppProps,\r\n    IFormatOperationsWithFunc,\r\n    IMapDispatchToProps,\r\n    IMapStateToProps,\r\n    TInputFunctions,\r\n    TOperationsBlock,\r\n} from './IApp';\r\nimport {\r\n    addSymbol,\r\n    calculate,\r\n    clean,\r\n    deleteLastSymbol,\r\n    setInput,\r\n    TCalcReducerPayloadAction,\r\n} from '../../redux/calc/calcReducer';\r\nimport {\r\n    getCalcOperations,\r\n    getDefaultOperations,\r\n    getError,\r\n    getExpression,\r\n    getInput,\r\n    getNumbersInputs,\r\n    getParenthesesOperations,\r\n    IFormatOperations,\r\n} from '../../redux/calc/calcSelectors';\r\nimport store from '../../redux/store';\r\n\r\nconst setFunctions = (operations: IFormatOperations, inputFuncs: TInputFunctions): IFormatOperationsWithFunc =>\r\n    Object.entries(operations).reduce((acc, [operationName, operation]) => {\r\n        const inputFuncsAsArr = Object.entries(inputFuncs);\r\n        const inputFuncArr = inputFuncsAsArr.find(([funcName]) => funcName === operation.funcName);\r\n\r\n        if (!inputFuncArr) {\r\n            throw new Error('Programming error: input function not found in \"setFunctions\" function');\r\n        }\r\n\r\n        const func = inputFuncArr[1];\r\n\r\n        const newOperation = { ...operation, func };\r\n\r\n        return { ...acc, [operationName]: newOperation };\r\n    }, {});\r\n\r\nconst getOperationsByBlocks = (\r\n    defaultOperations: IFormatOperations,\r\n    calcOperations: IFormatOperations,\r\n    numbersInputs: IFormatOperations,\r\n    parenthesesOperations: IFormatOperations,\r\n    inputFuncs: TInputFunctions\r\n): TOperationsBlock[] => {\r\n    const { clean, calculate } = setFunctions(defaultOperations, inputFuncs);\r\n    const { openParenthesis, closeParenthesis } = setFunctions(parenthesesOperations, inputFuncs);\r\n    const { addition, division, multiplication, percent, squareRoot, subtraction } = setFunctions(\r\n        calcOperations,\r\n        inputFuncs\r\n    );\r\n    const { zero, one, two, three, four, five, six, seven, eight, nine, doubleZero, comma } = setFunctions(\r\n        numbersInputs,\r\n        inputFuncs\r\n    );\r\n\r\n    const topLineBlockOpers = [clean, squareRoot, percent];\r\n    const rightColumnBlockOpers = [division, multiplication, subtraction, addition, calculate];\r\n    const numbersInputsBlockOpers = [seven, eight, nine, four, five, six, three, two, one, doubleZero, zero, comma];\r\n    const noBlockOpers = [openParenthesis, closeParenthesis];\r\n\r\n    return [topLineBlockOpers, rightColumnBlockOpers, numbersInputsBlockOpers, noBlockOpers];\r\n};\r\n\r\nconst respondOnKeyUp = (key: string, operations: TOperationsBlock) =>\r\n    Object.values(operations).forEach((operation) =>\r\n        operation.symbol === key || operation.exSymbols.includes(key) ? operation.func(operation.symbol) : null\r\n    );\r\n\r\nconst AppComponent = (props: AppProps) => {\r\n    const [topLineBlockOpers, rightColumnBlockOpers, numbersInputsBlockOpers, noBlockOpers] = getOperationsByBlocks(\r\n        props.defaultOperations,\r\n        props.calcOperations,\r\n        props.numbersInputs,\r\n        props.parenthesesOperations,\r\n        props.inputFuncs\r\n    );\r\n\r\n    const appWrapperRef = createRef<HTMLDivElement>();\r\n    const onEvent = (event: KeyboardEvent): void => {\r\n        if (event.key === 'Enter') {\r\n            props.inputFuncs.calculate();\r\n            return;\r\n        }\r\n        if (event.currentTarget !== event.target) {\r\n            event.stopPropagation();\r\n            return;\r\n        }\r\n        if (event.key === 'Backspace') {\r\n            props.inputFuncs.deleteLastSymbol();\r\n            return;\r\n        }\r\n\r\n        respondOnKeyUp(event.key, topLineBlockOpers);\r\n        respondOnKeyUp(event.key, rightColumnBlockOpers);\r\n        respondOnKeyUp(event.key, numbersInputsBlockOpers);\r\n        respondOnKeyUp(event.key, noBlockOpers);\r\n    };\r\n    useEffect(() => {\r\n        const appWrapperElement = appWrapperRef.current;\r\n\r\n        if (appWrapperElement === null)\r\n            throw new Error(\r\n                'Programming error: app wrapper ref element is null but expected HTMLDivElement in \"AppComponent\"'\r\n            );\r\n\r\n        appWrapperElement.focus();\r\n        appWrapperElement.addEventListener('keydown', onEvent);\r\n\r\n        return () => {\r\n            appWrapperElement.removeEventListener('keydown', onEvent);\r\n        };\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const OutputProps: TOutput = {\r\n        expression: props.expression,\r\n        inputVal: props.inputVal,\r\n        error: props.error,\r\n        onInputChange: (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n            if (e.currentTarget) props.setInput((e.currentTarget as HTMLInputElement).value);\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div ref={appWrapperRef} className={styles.app__wrapper} tabIndex={1}>\r\n            <div className={styles.app}>\r\n                <div className={styles.app__background}>\r\n                    <div className={styles.app__container}>\r\n                        <Output {...OutputProps} />\r\n                        <Input\r\n                            numbersInputsBlockOpers={numbersInputsBlockOpers}\r\n                            topLineBlockOpers={topLineBlockOpers}\r\n                            rightColumnBlockOpers={rightColumnBlockOpers}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateOrAny): IMapStateToProps => ({\r\n    inputVal: getInput(state),\r\n    expression: getExpression(state),\r\n    error: getError(state),\r\n    numbersInputs: getNumbersInputs(state),\r\n    parenthesesOperations: getParenthesesOperations(state),\r\n    defaultOperations: getDefaultOperations(state),\r\n    calcOperations: getCalcOperations(state),\r\n});\r\nconst mapDispatchToProps = (dispatch: (action: TCalcReducerPayloadAction) => {}): IMapDispatchToProps => ({\r\n    setInput: (value: string) => dispatch(setInput(value)),\r\n    inputFuncs: {\r\n        addSymbol: (symbol: string | undefined) => !!symbol && dispatch(addSymbol(symbol)),\r\n        calculate: () => dispatch(calculate()),\r\n        clean: () => dispatch(clean()),\r\n        deleteLastSymbol: () => dispatch(deleteLastSymbol()),\r\n    },\r\n});\r\n\r\nconst AppComponentContainer = connect(mapStateToProps, mapDispatchToProps)(AppComponent);\r\n\r\nconst App = () => (\r\n    <Provider store={store}>\r\n        <AppComponentContainer />\r\n    </Provider>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}