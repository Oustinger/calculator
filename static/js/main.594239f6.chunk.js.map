{"version":3,"sources":["components/inputPart/Input.module.css","App.module.css","components/outputPart/Output.module.css","components/inputPart/Input.jsx","components/outputPart/Output.jsx","utils/isNumber.js","calculatorFunctional/commonOperationClass.js","calculatorFunctional/calculateOperations/calcOperationClass.js","calculatorFunctional/calculateOperations/calcOperations.js","calculatorFunctional/calculateOperations/operations/addition.js","calculatorFunctional/calculateOperations/operations/division.js","calculatorFunctional/calculateOperations/operations/multiplication.js","calculatorFunctional/calculateOperations/operations/percent.js","calculatorFunctional/calculateOperations/operations/squareRoot.js","calculatorFunctional/calculateOperations/operations/subtraction.js","calculatorFunctional/calculateOperations/findOperationBySymbol.js","calculatorFunctional/numbersInputs/numbers/default/eight.js","calculatorFunctional/numbersInputs/numbers/default/five.js","calculatorFunctional/numbersInputs/numbers/default/four.js","calculatorFunctional/numbersInputs/numbers/default/nine.js","calculatorFunctional/numbersInputs/numbers/default/one.js","calculatorFunctional/numbersInputs/numbers/default/seven.js","calculatorFunctional/numbersInputs/numbers/default/six.js","calculatorFunctional/numbersInputs/numbers/default/three.js","calculatorFunctional/numbersInputs/numbers/default/two.js","calculatorFunctional/numbersInputs/numbersInputs.js","calculatorFunctional/numbersInputs/numbers/default/zero.js","calculatorFunctional/numbersInputs/numbers/doubleZero.js","calculatorFunctional/numbersInputs/otherInputs/comma.js","calculatorFunctional/numbersInputs/findNumberInputBySymbol.js","calculatorFunctional/calculateResult/parse.js","calculatorFunctional/calculateResult/calculateResult.js","calculatorFunctional/defaultOperations/operations/clean.js","calculatorFunctional/defaultOperations/operations/calculate.js","redux/calc/calcReducer.js","calculatorFunctional/defaultOperations/defaultOperations.js","redux/calc/calcSelectors.js","redux/store.js","App.js","index.js"],"names":["module","exports","Button","symbol","func","isInvert","data-symbol","className","cn","styles","button","invert","onClick","e","currentTarget","dataset","createBtn","data","Input","topLineBlockOpers","rightColumnBlockOpers","numbersInputsBlockOpers","input","topLine","map","rightLine","numbersInputs","Output","expression","inputVal","error","onInputChange","output","value","onChange","isNumber","isFinite","CommonOperationClass","exSymbols","this","includes","Operation","priority","canBePlacedAfterOtherOperation","canBePlacedBeforeOtherOperation","hasOwnFullCalculateFunc","exprStructure","index","argumentsNotFound","rightNumIndex","isExistRightNum","length","rightNum","leftNumIndex","isExistLeftNum","leftNum","prevExprElemIndex","isExistPrevExprElem","prevExprElem","nextExprElemIndex","isExistNextExprElem","nextExprElem","getPrevExprElem","getNextExprElem","Error","calcOperations","addition","stepByStepOperations","division","arg","getRightNum","divideByZero","multiplication","percent","makeCalculations","operationIndex","exprLastIndexToCalc","newExprStructure","slice","calculate","mainNumIndex","secondaryNumIndex","result","rightNumMustNotBe","squareRoot","Math","pow","getLeftNum","rightNumMustBe","leftExprMustNotBeNum","subtraction","findOperationBySymbol","Object","values","find","operation","checkIsOperation","eight","five","four","nine","one","seven","six","three","two","zero","doubleZero","comma","findNumberInputBySymbol","numberInput","parse","symbols","split","reduce","acc","array","correctSymbol","getMathCorrectSymbol","lastIndex","lastElement","isNextSymbolNumber","Number","parseFloat","newLastElement","accWithOutLastElem","forEach","element","parseCheck","calculateResult","maxPriority","maxPriorityOperationIndex","exprChild","isExprChildNumber","currentPriority","toString","number","clean","SET_INPUT","ADD_SYMBOL","CLEAN","CALCULATE","DELETE_LAST_SYMBOL","initialState","defaultOperations","calcReducer","state","action","type","payload","message","getInput","calc","getExpression","getError","format","funcName","formatOperations","operations","customOperations","entries","name","getSymbol","getExSymbols","getNumbersInputs","createSelector","numberInputs","getDefaultOperations","getCalcOperations","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","setFunctions","inputFuncs","operationName","newOperation","respondOnKeyUp","key","AppComponentContainer","connect","dispatch","setInput","addSymbol","deleteLastSymbol","props","getOperationsByBlocks","appWrapperRef","React","createRef","onEvent","event","target","stopPropagation","useEffect","appWrapperElement","current","focus","addEventListener","removeEventListener","ref","app__wrapper","tabIndex","app","app__background","app__container","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.594239f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__27qo_\",\"topLine\":\"Input_topLine__iU4_A\",\"rightLine\":\"Input_rightLine__1rUFs\",\"numbersInputs\":\"Input_numbersInputs__tHpn1\",\"button\":\"Input_button__1l2g3\",\"invert\":\"Input_invert__33dsx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app__wrapper\":\"App_app__wrapper__3RrYi\",\"app\":\"App_app__H_brq\",\"app__background\":\"App_app__background__1s2Vl\",\"app__container\":\"App_app__container__1tJb9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"output\":\"Output_output__bVBha\",\"error\":\"Output_error__30KkT\",\"input\":\"Output_input__1mCES\"};","import cn from 'classnames';\r\nimport styles from './Input.module.css';\r\n\r\nconst Button = ({ symbol, func, isInvert }) => (\r\n    <div data-symbol={symbol}\r\n        className={cn(styles.button, { [styles.invert]: isInvert })}\r\n        onClick={(e) => func(e.currentTarget.dataset.symbol)}>\r\n        {symbol}\r\n    </div>\r\n);\r\n\r\nconst createBtn = (data) => (<Button key={data.symbol} {...data} />);\r\n\r\nconst Input = ({ topLineBlockOpers, rightColumnBlockOpers, numbersInputsBlockOpers }) => (\r\n    <div className={styles.input}>\r\n        <div className={styles.topLine}>\r\n            {topLineBlockOpers.map(createBtn)}\r\n        </div>\r\n        <div className={styles.rightLine}>\r\n            {rightColumnBlockOpers.map(createBtn)}\r\n        </div>\r\n        <div className={styles.numbersInputs}>\r\n            {numbersInputsBlockOpers.map(createBtn)}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Input;","import styles from './Output.module.css';\r\n\r\nconst Output = ({ expression, inputVal, error, onInputChange }) => {\r\n    return (\r\n        <div className={styles.output}>\r\n            <div className={styles.expression}>{expression}</div>\r\n            <input className={styles.input} value={inputVal} onChange={onInputChange} />\r\n            <span className={styles.error}>{error}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Output;","const isNumber = (value) => (typeof value === 'number' && isFinite(value));\r\n\r\nexport default isNumber;","export default class CommonOperationClass {\r\n    constructor(symbol, exSymbols = []) {\r\n        this.symbol = symbol;\r\n        this.exSymbols = exSymbols;\r\n    }\r\n\r\n    getSymbol() {\r\n        return this.symbol;\r\n    };\r\n\r\n    getExSymbols() {\r\n        return this.exSymbols;\r\n    };\r\n\r\n    getMathCorrectSymbol() {\r\n        return this.symbol;\r\n    };\r\n\r\n    checkIsOperation(symbol) {\r\n        return this.symbol === symbol || this.exSymbols.includes(symbol);\r\n    };\r\n}","import CommonOperationClass from '../commonOperationClass';\r\nimport isNumber from \"../../utils/isNumber\";\r\n\r\nexport default class Operation extends CommonOperationClass {\r\n    constructor(symbol, priority, exSymbols = []) {\r\n        super(symbol, exSymbols);\r\n        this.priority = priority;\r\n    }\r\n\r\n    canBePlacedAfterOtherOperation = false;\r\n    canBePlacedBeforeOtherOperation = false;\r\n\r\n    hasOwnFullCalculateFunc = false;\r\n\r\n\r\n    parseCheck(exprStructure, index) {\r\n        this.argumentsNotFound(exprStructure, index);\r\n    }\r\n\r\n    getRightNum(exprStructure, index) {\r\n        const rightNumIndex = index + 1;\r\n        const isExistRightNum = (rightNumIndex < exprStructure.length) && isNumber(exprStructure[rightNumIndex]);\r\n        const rightNum = isExistRightNum ? exprStructure[rightNumIndex] : null;\r\n        return { rightNum, isExistRightNum };\r\n    }\r\n\r\n    getLeftNum(exprStructure, index) {\r\n        const leftNumIndex = index - 1;\r\n        const isExistLeftNum = (leftNumIndex >= 0) && isNumber(exprStructure[leftNumIndex]);\r\n        const leftNum = isExistLeftNum ? exprStructure[leftNumIndex] : null;\r\n        return { leftNum, isExistLeftNum };\r\n    }\r\n\r\n    getPrevExprElem(exprStructure, index) {\r\n        const prevExprElemIndex = index - 1;\r\n\r\n        const isExistPrevExprElem = prevExprElemIndex >= 0;\r\n\r\n        const prevExprElem = isExistPrevExprElem ? exprStructure[prevExprElemIndex] : null;\r\n\r\n        return { prevExprElem, isExistPrevExprElem };\r\n    }\r\n\r\n    getNextExprElem(exprStructure, index) {\r\n        const nextExprElemIndex = index + 1;\r\n\r\n        const isExistNextExprElem = nextExprElemIndex < exprStructure.length;\r\n\r\n        const nextExprElem = isExistNextExprElem ? exprStructure[nextExprElemIndex] : null;\r\n\r\n        return { nextExprElem, isExistNextExprElem };\r\n    }\r\n\r\n    // common parse checkers\r\n    argumentsNotFound(exprStructure, index) {\r\n        const { prevExprElem, isExistPrevExprElem } = this.getPrevExprElem(exprStructure, index);\r\n        const { nextExprElem, isExistNextExprElem } = this.getNextExprElem(exprStructure, index);\r\n\r\n        if (\r\n            (!isExistPrevExprElem && !isExistNextExprElem) || (\r\n                !(\r\n                    isNumber(prevExprElem) ||\r\n                    this.canBePlacedAfterOtherOperation ||\r\n                    (nextExprElem && nextExprElem.canBePlacedBeforeOtherOperation)\r\n                ) && !(\r\n                    isNumber(nextExprElem) ||\r\n                    this.canBePlacedBeforeOtherOperation ||\r\n                    (nextExprElem && nextExprElem.canBePlacedAfterOtherOperation)\r\n                )\r\n            )\r\n        ) {\r\n            throw new Error('Arguments not found');\r\n        }\r\n    }\r\n    stepByStepOperations(exprStructure, index) {\r\n        const { prevExprElem } = this.getPrevExprElem(exprStructure, index);\r\n        const { nextExprElem } = this.getNextExprElem(exprStructure, index);\r\n\r\n        if (\r\n            (\r\n                prevExprElem && !isNumber(prevExprElem) && (\r\n                    !prevExprElem.canBePlacedBeforeOtherOperation || this.canBePlacedAfterOtherOperation\r\n                )\r\n            ) || (\r\n                nextExprElem && !isNumber(nextExprElem) && (\r\n                    !nextExprElem.canBePlacedAfterOtherOperation || this.canBePlacedBeforeOtherOperation\r\n                )\r\n            )\r\n        ) {\r\n            throw new Error('There are operations that cannot be performed step by step');\r\n        }\r\n    }\r\n};","import addition from './operations/addition';\r\nimport division from './operations/division';\r\nimport multiplication from './operations/multiplication';\r\nimport percent from './operations/percent';\r\nimport squareRoot from './operations/squareRoot';\r\nimport subtraction from './operations/subtraction';\r\n\r\nconst calcOperations = {\r\n    addition, division, multiplication,\r\n    percent, squareRoot, subtraction,\r\n};\r\n\r\nexport default calcOperations;","import Operation from \"../calcOperationClass\";\r\n\r\nclass Addition extends Operation {\r\n    calculate(leftNum, rightNum) {\r\n        return (leftNum !== null ? leftNum : 0) + (rightNum !== null ? rightNum : 0);\r\n    }\r\n\r\n    parseCheck(exprStructure, index) {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        this.stepByStepOperations(exprStructure, index);\r\n    }\r\n}\r\n\r\nconst addition = new Addition('+', 0);\r\n\r\nexport default addition;","import Operation from \"../calcOperationClass\";\r\n\r\nclass Division extends Operation {\r\n    calculate(leftNum, rightNum) {\r\n        return (leftNum !== null ? leftNum : 1) / (rightNum !== null ? rightNum : 1);\r\n    }\r\n\r\n    checkArg(arg) {\r\n        return arg !== 0;\r\n    }\r\n\r\n    parseCheck(exprStructure, index) {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        const { rightNum } = this.getRightNum(exprStructure, index);\r\n\r\n        this.stepByStepOperations(exprStructure, index);\r\n        this.divideByZero(rightNum);\r\n    }\r\n\r\n    // custom parse checkers\r\n    divideByZero(rightNum) {\r\n        if (rightNum === 0) {\r\n            throw new Error('You cannot divide by zero');\r\n        }\r\n    }\r\n}\r\n\r\nconst division = new Division('/', 1);\r\n\r\nexport default division;","import Operation from \"../calcOperationClass\";\r\n\r\nclass Multiplication extends Operation {\r\n    calculate(leftNum, rightNum) {\r\n        return (leftNum !== null ? leftNum : 1) * (rightNum !== null ? rightNum : 1)\r\n    }\r\n\r\n    parseCheck(exprStructure, index) {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        this.stepByStepOperations(exprStructure, index);\r\n    }\r\n}\r\n\r\nconst multiplication = new Multiplication('×', 1, ['*']);\r\n\r\nexport default multiplication;","import isNumber from \"../../../utils/isNumber\";\r\nimport Operation from \"../calcOperationClass\";\r\n\r\nclass Percent extends Operation {\r\n    canBePlacedBeforeOtherOperation = true;\r\n    hasOwnFullCalculateFunc = true;\r\n\r\n    calculate(exprStructure, makeCalculations, operationIndex) {\r\n        // checking operation before (on the left) this operation\r\n        // there is should be only one operation with priority = 0 or no one at all\r\n        if (!(1 <= operationIndex && operationIndex <= 3)) {\r\n            // if false we need to calc part of expression on the left\r\n            const exprLastIndexToCalc = operationIndex - 2;\r\n            const newLeftPart = makeCalculations(exprStructure.slice(0, exprLastIndexToCalc), 0);\r\n\r\n            const newExprStructure = [\r\n                newLeftPart,\r\n                ...exprStructure.slice(exprLastIndexToCalc),\r\n            ];\r\n            const newOperationIndex = 3;\r\n\r\n            return this.calculate(newExprStructure, makeCalculations, newOperationIndex);\r\n        }\r\n\r\n        const mainNumIndex = operationIndex - 3;\r\n        const isExistMainNum = (mainNumIndex >= 0) && isNumber(exprStructure[mainNumIndex]);\r\n        const mainNum = isExistMainNum ? exprStructure[mainNumIndex] : 1;\r\n\r\n        const secondaryNumIndex = operationIndex - 1;\r\n        const secondaryNum = exprStructure[secondaryNumIndex];\r\n\r\n        const result = mainNum / 100 * secondaryNum;\r\n\r\n        const newExprStructure = [\r\n            ...exprStructure.slice(0, secondaryNumIndex),\r\n            result,\r\n            ...exprStructure.slice(operationIndex + 1),\r\n        ];\r\n\r\n        return newExprStructure;\r\n    };\r\n\r\n    parseCheck(exprStructure, index) {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        const { isExistRightNum } = this.getRightNum(exprStructure, index);\r\n\r\n        this.rightNumMustNotBe(isExistRightNum);\r\n    }\r\n\r\n    // custom parse checkers\r\n    rightNumMustNotBe(isExistRightNum) {\r\n        if (isExistRightNum) {\r\n            throw new Error('The percent operation mustn\\'t has a number on the right');\r\n        }\r\n    }\r\n}\r\n\r\nconst percent = new Percent('%', 2);\r\n\r\nexport default percent;","import Operation from \"../calcOperationClass\";\r\n\r\nclass SquareRoot extends Operation {\r\n    canBePlacedAfterOtherOperation = true;\r\n    canBePlacedBeforeOtherOperation = true;\r\n\r\n    calculate(leftNum, rightNum) {\r\n        return (leftNum !== null ? leftNum : 1) * Math.pow(rightNum, 0.5);\r\n    }\r\n\r\n    checkArg(arg) {\r\n        return arg >= 0;\r\n    }\r\n\r\n    parseCheck(exprStructure, index) {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        const { isExistLeftNum } = this.getLeftNum(exprStructure, index);\r\n        const { isExistRightNum } = this.getRightNum(exprStructure, index);\r\n\r\n        this.rightNumMustBe(isExistRightNum);\r\n        this.leftExprMustNotBeNum(isExistLeftNum);\r\n    }\r\n\r\n    // custom parse checkers\r\n    rightNumMustBe(isExistRightNum) {\r\n        if (!isExistRightNum) {\r\n            throw new Error('The square root operation need an argument on the right');\r\n        }\r\n    }\r\n    leftExprMustNotBeNum(isExistLeftNum) {\r\n        if (isExistLeftNum) {\r\n            throw new Error('The square root operation mustn\\'t has any number on the left');\r\n        }\r\n    }\r\n}\r\n\r\nconst squareRoot = new SquareRoot('√', 2);\r\n\r\nexport default squareRoot;","import Operation from \"../calcOperationClass\";\r\n\r\nclass Subtraction extends Operation {\r\n    calculate(leftNum, rightNum) {\r\n        return (leftNum !== null ? leftNum : 0) - (rightNum !== null ? rightNum : 0);\r\n    }\r\n\r\n    parseCheck(exprStructure, index) {\r\n        super.parseCheck(exprStructure, index);\r\n\r\n        this.stepByStepOperations(exprStructure, index);\r\n    }\r\n}\r\n\r\nconst subtraction = new Subtraction('-', 0);\r\n\r\nexport default subtraction;","import calcOperations from './calcOperations';\r\n\r\nconst findOperationBySymbol = (symbol) => Object.values(calcOperations)\r\n    .find((operation) => operation.checkIsOperation(symbol));\r\n\r\nexport default findOperationBySymbol;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst eight = new CommonOperationClass('8');\r\n\r\nexport default eight;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst five = new CommonOperationClass('5');\r\n\r\nexport default five;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst four = new CommonOperationClass('4');\r\n\r\nexport default four;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst nine = new CommonOperationClass('9');\r\n\r\nexport default nine;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst one = new CommonOperationClass('1');\r\n\r\nexport default one;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst seven = new CommonOperationClass('7');\r\n\r\nexport default seven;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst six = new CommonOperationClass('6');\r\n\r\nexport default six;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst three = new CommonOperationClass('3');\r\n\r\nexport default three;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst two = new CommonOperationClass('2');\r\n\r\nexport default two;","import eight from './numbers/default/eight';\r\nimport five from './numbers/default/five';\r\nimport four from './numbers/default/four';\r\nimport nine from './numbers/default/nine';\r\nimport one from './numbers/default/one';\r\nimport seven from './numbers/default/seven';\r\nimport six from './numbers/default/six';\r\nimport three from './numbers/default/three';\r\nimport two from './numbers/default/two';\r\nimport zero from './numbers/default/zero';\r\nimport doubleZero from './numbers/doubleZero';\r\nimport comma from './otherInputs/comma';\r\n\r\nconst numbersInputs = {\r\n    zero, one, two, three, four, five, six, seven, eight, nine, doubleZero, comma\r\n};\r\n\r\nexport default numbersInputs;","import CommonOperationClass from '../../../commonOperationClass';\r\n\r\nconst zero = new CommonOperationClass('0');\r\n\r\nexport default zero;","import CommonOperationClass from '../../commonOperationClass';\r\n\r\nconst doubleZero = new CommonOperationClass('00');\r\n\r\nexport default doubleZero;","import CommonOperationClass from '../../commonOperationClass';\r\n\r\nclass Comma extends CommonOperationClass {\r\n    getMathCorrectSymbol() {\r\n        return this.exSymbols[0];\r\n    }\r\n}\r\n\r\nconst comma = new Comma(',', ['.']);\r\n\r\nexport default comma;","import numbersInputs from './numbersInputs';\r\n\r\nconst findNumberInputBySymbol = (symbol) => Object.values(numbersInputs)\r\n    .find((numberInput) => numberInput.checkIsOperation(symbol));\r\n\r\nexport default findNumberInputBySymbol;","import isNumber from './../../utils/isNumber';\r\nimport findOperationBySymbol from './../calculateOperations/findOperationBySymbol';\r\nimport findNumberInputBySymbol from './../numbersInputs/findNumberInputBySymbol';\r\n\r\nconst parse = (symbols) => {\r\n    const exprStructure = symbols.split('').reduce((acc, symbol, index, array) => {\r\n        const numberInput = findNumberInputBySymbol(symbol);\r\n        if (numberInput) {\r\n            const correctSymbol = numberInput.getMathCorrectSymbol();\r\n\r\n            const lastIndex = acc.length - 1;\r\n            const lastElement = acc[lastIndex];\r\n            const nextSymbolIndex = index + 1;\r\n            const isNextSymbolNumber = !!findNumberInputBySymbol(array[nextSymbolIndex]);\r\n\r\n            if (isNumber(Number.parseFloat(lastElement))) {\r\n                const newLastElement = lastElement + correctSymbol;\r\n                const accWithOutLastElem = acc.slice(0, lastIndex);\r\n\r\n                if (!isNextSymbolNumber)\r\n                    return [...accWithOutLastElem, Number.parseFloat(newLastElement)];\r\n\r\n                return [...accWithOutLastElem, newLastElement];\r\n            }\r\n\r\n            if (!isNextSymbolNumber)\r\n                return [...acc, Number.parseFloat(correctSymbol)];\r\n\r\n            return [...acc, correctSymbol];\r\n        }\r\n\r\n        const operation = findOperationBySymbol(symbol);\r\n        if (operation)\r\n            return [...acc, operation];\r\n\r\n        throw new Error(`Unknown symbol: \" ${symbol} \"`);\r\n    }, []);\r\n\r\n    try {\r\n        // check by operations checkers\r\n        exprStructure.forEach(\r\n            (element, index) => {\r\n                return isNumber(element) ? null : element.parseCheck(exprStructure, index)\r\n            }\r\n        );\r\n        return exprStructure;\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport default parse;","import isNumber from './../../utils/isNumber';\r\nimport parse from './parse';\r\n\r\nconst calculateResult = (expression) => {\r\n    const makeCalculations = (exprStructure, index, maxPriority = -1, maxPriorityOperationIndex = null) => {\r\n        if (exprStructure.length === 1) {\r\n            return exprStructure[0];\r\n        }\r\n\r\n        if (index === exprStructure.length) {\r\n            const operation = exprStructure[maxPriorityOperationIndex];\r\n\r\n            if (operation.hasOwnFullCalculateFunc) {\r\n                const newExprStructure = operation.calculate(\r\n                    exprStructure, makeCalculations, maxPriorityOperationIndex\r\n                );\r\n                return makeCalculations(newExprStructure, 0);\r\n            }\r\n\r\n            const leftNumIndex = maxPriorityOperationIndex - 1;\r\n            const isExistLeftNum = (leftNumIndex >= 0) && isNumber(exprStructure[leftNumIndex]);\r\n            const leftNum = isExistLeftNum ? exprStructure[leftNumIndex] : null;\r\n\r\n            const rightNumIndex = maxPriorityOperationIndex + 1;\r\n            const isExistRightNum = (rightNumIndex < index) && isNumber(exprStructure[rightNumIndex]);\r\n            const rightNum = isExistRightNum ? exprStructure[rightNumIndex] : null;\r\n\r\n            const result = operation.calculate(leftNum, rightNum);\r\n\r\n            const newExprStructure = [\r\n                ...exprStructure.slice(0, isExistLeftNum ? leftNumIndex : leftNumIndex + 1),\r\n                result,\r\n                ...exprStructure.slice(isExistRightNum ? rightNumIndex + 1 : rightNumIndex),\r\n            ];\r\n\r\n            return makeCalculations(newExprStructure, 0);\r\n        }\r\n\r\n        const exprChild = exprStructure[index];\r\n\r\n        const isExprChildNumber = isNumber(exprChild);\r\n        if (isExprChildNumber)\r\n            return makeCalculations(exprStructure, index + 1, maxPriority, maxPriorityOperationIndex);\r\n\r\n        // else exprChild is operation\r\n        const currentPriority = exprChild.priority;\r\n        if (currentPriority > maxPriority)\r\n            return makeCalculations(exprStructure, index + 1, currentPriority, index);\r\n\r\n        return makeCalculations(exprStructure, index + 1, maxPriority, maxPriorityOperationIndex);\r\n    };\r\n\r\n    const exprStructure = parse(expression);\r\n    const result = makeCalculations(exprStructure, 0);\r\n    const formattedResult = result.toString().split('')\r\n        .map(number => number === '.' ? ',' : number)\r\n        .reduce((acc, number) => `${acc}${number}`);\r\n\r\n    return formattedResult;\r\n};\r\n\r\nexport default calculateResult;","import CommonOperationClass from '../../commonOperationClass';\r\n\r\nconst clean = new CommonOperationClass('C');\r\n\r\nexport default clean;","import CommonOperationClass from '../../commonOperationClass';\r\n\r\nconst calculate = new CommonOperationClass('=');\r\n\r\nexport default calculate;","import calculateResult from '../../calculatorFunctional/calculateResult/calculateResult';\r\nimport calcOperations from './../../calculatorFunctional/calculateOperations/calcOperations';\r\nimport defaultOperations from './../../calculatorFunctional/defaultOperations/defaultOperations';\r\nimport numbersInputs from './../../calculatorFunctional/numbersInputs/numbersInputs';\r\n\r\nconst SET_INPUT = 'calcReducer/SET_INPUT';\r\nconst ADD_SYMBOL = 'calcReducer/ADD_SYMBOL';\r\nconst CLEAN = 'calcReducer/CLEAN';\r\nconst CALCULATE = 'calcReducer/CALCULATE';\r\nconst DELETE_LAST_SYMBOL = 'calcReducer/DELETE_LAST_SYMBOL';\r\n\r\nconst initialState = {\r\n    input: '',\r\n    expression: null,\r\n    numbersInputs,\r\n    defaultOperations,\r\n    calcOperations,\r\n    error: null,\r\n}\r\n\r\nconst calcReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_INPUT:\r\n            return ({ ...state, ...action.payload });\r\n        case ADD_SYMBOL:\r\n            return ({ ...state, input: `${state.input}${action.symbol}` });\r\n        case CLEAN:\r\n            return ({ ...state, input: '', expression: null, error: null });\r\n        case DELETE_LAST_SYMBOL:\r\n            return ({ ...state, input: state.input.slice(0, state.input.length - 1) });\r\n        case CALCULATE:\r\n            try {\r\n                const expression = state.input;\r\n                const result = calculateResult(expression);\r\n                return ({ ...state, input: result, expression, error: null });\r\n            } catch (error) {\r\n                return ({ ...state, error: error.message });\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setInput = (input) => ({ type: SET_INPUT, payload: { input } });\r\nexport const addSymbol = (symbol) => ({ type: ADD_SYMBOL, symbol });\r\nexport const calculate = () => ({ type: CALCULATE });\r\nexport const clean = () => ({ type: CLEAN });\r\nexport const deleteLastSymbol = () => ({ type: DELETE_LAST_SYMBOL });\r\n\r\nexport default calcReducer;","\r\nimport clean from './operations/clean';\r\nimport calculate from './operations/calculate';\r\n\r\nconst defaultOperations = { clean, calculate };\r\n\r\nexport default defaultOperations;","import { createSelector } from \"reselect\";\r\n\r\nexport const getInput = (state) => state.calc.input;\r\nexport const getExpression = (state) => state.calc.expression;\r\nexport const getError = (state) => state.calc.error;\r\n\r\n\r\nconst format = (symbol, exSymbols, funcName = null, isInvert = false) => ({\r\n    symbol,\r\n    exSymbols,\r\n    funcName: funcName ? funcName : 'addSymbol',\r\n    isInvert,\r\n});\r\nconst formatOperations = (operations, customOperations = {}) => (\r\n    Object.entries(operations)\r\n        .reduce((acc, [name, operation]) => (\r\n            {\r\n                ...acc, [name]: format(\r\n                    operation.getSymbol(),\r\n                    operation.getExSymbols(),\r\n                    customOperations[name] ? customOperations[name].funcName : null,\r\n                    customOperations[name] ? customOperations[name].isInvert : null,\r\n                )\r\n            }\r\n        ), {})\r\n);\r\n\r\nconst getNumbersInputsPrimitive = (state) => state.calc.numbersInputs;\r\nexport const getNumbersInputs = createSelector(\r\n    getNumbersInputsPrimitive,\r\n    (numberInputs) => formatOperations(numberInputs),\r\n);\r\n\r\nconst getDefaultOperationsPrimitive = (state) => state.calc.defaultOperations;\r\nexport const getDefaultOperations = createSelector(\r\n    getDefaultOperationsPrimitive,\r\n    (operations) => formatOperations(operations, {\r\n        clean: {\r\n            funcName: 'clean',\r\n        },\r\n        calculate: {\r\n            funcName: 'calculate',\r\n            isInvert: true,\r\n        },\r\n    }),\r\n);\r\n\r\nconst getCalcOperationsPrimitive = (state) => state.calc.calcOperations;\r\nexport const getCalcOperations = createSelector(\r\n    getCalcOperationsPrimitive,\r\n    (operations) => formatOperations(operations),\r\n);","import { combineReducers, compose, createStore } from \"redux\";\r\nimport calcReducer from './calc/calcReducer';\r\n\r\nconst reducers = combineReducers({\r\n    calc: calcReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers());\r\n\r\nexport default store;","import React, { useEffect } from 'react';\nimport { connect, Provider } from 'react-redux';\nimport './App.module.css';\nimport styles from './App.module.css';\nimport Input from './components/inputPart/Input';\nimport Output from './components/outputPart/Output';\nimport { addSymbol, calculate, clean, setInput, deleteLastSymbol } from './redux/calc/calcReducer';\nimport {\n    getCalcOperations,\n    getDefaultOperations,\n    getError,\n    getExpression, getInput, getNumbersInputs\n} from './redux/calc/calcSelectors';\nimport store from './redux/store';\n\nconst setFunctions = (operations, inputFuncs) => (\n    Object.entries(operations)\n        .reduce((acc, [operationName, operation]) => {\n            const func = Object.entries(inputFuncs)\n                .find(([funcName]) => funcName === operation.funcName)[1];\n\n            const newOperation = { ...operation, func };\n\n            return { ...acc, [operationName]: newOperation };\n        }, {})\n);\n\nconst getOperationsByBlocks = (defaultOperations, calcOperations, numbersInputs, inputFuncs) => {\n    const { clean, calculate } = setFunctions(defaultOperations, inputFuncs);\n    const {\n        addition, division, multiplication, percent, squareRoot, subtraction,\n    } = setFunctions(calcOperations, inputFuncs);\n    const {\n        zero, one, two, three, four, five, six, seven, eight, nine, doubleZero, comma,\n    } = setFunctions(numbersInputs, inputFuncs);\n\n    const topLineBlockOpers = [clean, squareRoot, percent];\n    const rightColumnBlockOpers = [division, multiplication, subtraction, addition, calculate];\n    const numbersInputsBlockOpers = [seven, eight, nine, four, five, six, three, two, one, doubleZero, zero, comma];\n\n    return [topLineBlockOpers, rightColumnBlockOpers, numbersInputsBlockOpers];\n};\n\nconst respondOnKeyUp = (key, operations) => (\n    Object.values(operations)\n        .forEach(operation => (\n            (operation.symbol === key || operation.exSymbols.includes(key)) ? operation.func(operation.symbol) : null\n        ))\n);\n\nconst AppComponent = (props) => {\n    const [topLineBlockOpers, rightColumnBlockOpers, numbersInputsBlockOpers] = getOperationsByBlocks(\n        props.defaultOperations, props.calcOperations, props.numbersInputs, props.inputFuncs\n    );\n    \n    const appWrapperRef = React.createRef();\n    const onEvent = (event) => {\n        if (event.key === 'Enter') {\n            props.inputFuncs.calculate();\n            return;\n        }\n        if (event.currentTarget !== event.target) {\n            event.stopPropagation();\n            return;\n        }\n        if (event.key === 'Backspace') {\n            props.inputFuncs.deleteLastSymbol();\n            return;\n        }\n\n        respondOnKeyUp(event.key, topLineBlockOpers);\n        respondOnKeyUp(event.key, rightColumnBlockOpers);\n        respondOnKeyUp(event.key, numbersInputsBlockOpers);\n    };\n    useEffect(() => {\n        const appWrapperElement = appWrapperRef.current;\n        appWrapperElement.focus();\n        appWrapperElement.addEventListener('keyup', onEvent);\n\n        return () => {\n            appWrapperElement.removeEventListener('keyup', onEvent);\n        };\n    }, [appWrapperRef, onEvent]);\n\n    return (\n        <div ref={appWrapperRef} className={styles.app__wrapper} tabIndex={1}>\n            <div className={styles.app}>\n                <div className={styles.app__background}>\n                    <div className={styles.app__container}>\n                        <Output expression={props.expression}\n                            inputVal={props.inputVal}\n                            error={props.error}\n                            onInputChange={(e) => props.setInput(e.currentTarget.value)}\n                        />\n                        <Input numbersInputsBlockOpers={numbersInputsBlockOpers}\n                            topLineBlockOpers={topLineBlockOpers}\n                            rightColumnBlockOpers={rightColumnBlockOpers}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    inputVal: getInput(state),\n    expression: getExpression(state),\n    error: getError(state),\n    numbersInputs: getNumbersInputs(state),\n    defaultOperations: getDefaultOperations(state),\n    calcOperations: getCalcOperations(state),\n});\nconst mapDispatchToProps = (dispatch) => ({\n    setInput: (value) => dispatch(setInput(value)),\n    inputFuncs: {\n        addSymbol: (symbol) => dispatch(addSymbol(symbol)),\n        calculate: () => dispatch(calculate()),\n        clean: () => dispatch(clean()),\n        deleteLastSymbol: () => dispatch(deleteLastSymbol()),\n    },\n});\n\nconst AppComponentContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(AppComponent);\n\nconst App = () => (\n    <Provider store={store}>\n        <AppComponentContainer />\n    </Provider>\n);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}